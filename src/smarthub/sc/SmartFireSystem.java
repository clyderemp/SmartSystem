/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class SmartFireSystem implements IStatemachine, ITimed {
	public static class Timer {
		private SmartFireSystem parent;
		
		public Timer(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean enable;
		
		
		public void raiseEnable() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					enable = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean disable;
		
		
		public void raiseDisable() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					disable = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					reset = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean color;
		
		private String colorValue;
		
		
		protected void raiseColor(String value) {
			synchronized(parent) {
				colorValue = value;
				color = true;
				colorObservable.next(value);
			}
		}
		
		private Observable<String> colorObservable = new Observable<String>();
		
		public Observable<String> getColor() {
			return colorObservable;
		}
		
		private long counter;
		
		public synchronized long getCounter() {
			synchronized(parent) {
				return counter;
			}
		}
		
		public void setCounter(long value) {
			synchronized(parent) {
				this.counter = value;
			}
		}
		
		private long warning_period;
		
		public synchronized long getWarning_period() {
			synchronized(parent) {
				return warning_period;
			}
		}
		
		public void setWarning_period(long value) {
			synchronized(parent) {
				this.warning_period = value;
			}
		}
		
		private long final_warning_period;
		
		public synchronized long getFinal_warning_period() {
			synchronized(parent) {
				return final_warning_period;
			}
		}
		
		public void setFinal_warning_period(long value) {
			synchronized(parent) {
				this.final_warning_period = value;
			}
		}
		
	}
	
	public static class Message {
		private SmartFireSystem parent;
		
		public Message(SmartFireSystem parent) {
			this.parent = parent;
		}
		private String status;
		
		public synchronized String getStatus() {
			synchronized(parent) {
				return status;
			}
		}
		
		public void setStatus(String value) {
			synchronized(parent) {
				this.status = value;
			}
		}
		
		private String sensor;
		
		public synchronized String getSensor() {
			synchronized(parent) {
				return sensor;
			}
		}
		
		public void setSensor(String value) {
			synchronized(parent) {
				this.sensor = value;
			}
		}
		
	}
	
	public static class Mode {
		private SmartFireSystem parent;
		
		public Mode(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean manual_alarm_off;
		
		
		public void raiseManual_alarm_off() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					manual_alarm_off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean manual_alarm_on;
		
		
		public void raiseManual_alarm_on() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					manual_alarm_on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean safe;
		
		
		protected void raiseSafe() {
			synchronized(parent) {
				safe = true;
				safeObservable.next(null);
				parent.raiseLocal_Mode_safe();
			}
		}
		
		private Observable<Void> safeObservable = new Observable<Void>();
		
		public Observable<Void> getSafe() {
			return safeObservable;
		}
		
		private boolean warning;
		
		
		protected void raiseWarning() {
			synchronized(parent) {
				warning = true;
				warningObservable.next(null);
				parent.raiseLocal_Mode_warning();
			}
		}
		
		private Observable<Void> warningObservable = new Observable<Void>();
		
		public Observable<Void> getWarning() {
			return warningObservable;
		}
		
		private boolean final_warning;
		
		
		protected void raiseFinal_warning() {
			synchronized(parent) {
				final_warning = true;
				final_warningObservable.next(null);
			}
		}
		
		private Observable<Void> final_warningObservable = new Observable<Void>();
		
		public Observable<Void> getFinal_warning() {
			return final_warningObservable;
		}
		
		private boolean danger;
		
		
		protected void raiseDanger() {
			synchronized(parent) {
				danger = true;
				dangerObservable.next(null);
				parent.raiseLocal_Mode_danger();
			}
		}
		
		private Observable<Void> dangerObservable = new Observable<Void>();
		
		public Observable<Void> getDanger() {
			return dangerObservable;
		}
		
	}
	
	public static class Alarm {
		private SmartFireSystem parent;
		
		public Alarm(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean threshold_reached;
		
		public synchronized boolean getThreshold_reached() {
			synchronized(parent) {
				return threshold_reached;
			}
		}
		
		public void setThreshold_reached(boolean value) {
			synchronized(parent) {
				this.threshold_reached = value;
			}
		}
		
		private boolean sound;
		
		public synchronized boolean getSound() {
			synchronized(parent) {
				return sound;
			}
		}
		
		public void setSound(boolean value) {
			synchronized(parent) {
				this.sound = value;
			}
		}
		
	}
	
	public static class Sensors {
		private SmartFireSystem parent;
		
		public Sensors(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean smoke;
		
		
		protected void raiseSmoke() {
			synchronized(parent) {
				smoke = true;
				smokeObservable.next(null);
			}
		}
		
		private Observable<Void> smokeObservable = new Observable<Void>();
		
		public Observable<Void> getSmoke() {
			return smokeObservable;
		}
		
		private boolean carbon;
		
		
		protected void raiseCarbon() {
			synchronized(parent) {
				carbon = true;
				carbonObservable.next(null);
			}
		}
		
		private Observable<Void> carbonObservable = new Observable<Void>();
		
		public Observable<Void> getCarbon() {
			return carbonObservable;
		}
		
		private boolean fire;
		
		
		protected void raiseFire() {
			synchronized(parent) {
				fire = true;
				fireObservable.next(null);
			}
		}
		
		private Observable<Void> fireObservable = new Observable<Void>();
		
		public Observable<Void> getFire() {
			return fireObservable;
		}
		
		private boolean smoke_standby;
		
		public synchronized boolean getSmoke_standby() {
			synchronized(parent) {
				return smoke_standby;
			}
		}
		
		public void setSmoke_standby(boolean value) {
			synchronized(parent) {
				this.smoke_standby = value;
			}
		}
		
		private boolean carbon_standby;
		
		public synchronized boolean getCarbon_standby() {
			synchronized(parent) {
				return carbon_standby;
			}
		}
		
		public void setCarbon_standby(boolean value) {
			synchronized(parent) {
				this.carbon_standby = value;
			}
		}
		
		private boolean fire_standby;
		
		public synchronized boolean getFire_standby() {
			synchronized(parent) {
				return fire_standby;
			}
		}
		
		public void setFire_standby(boolean value) {
			synchronized(parent) {
				this.fire_standby = value;
			}
		}
		
		private long smoke_value;
		
		public synchronized long getSmoke_value() {
			synchronized(parent) {
				return smoke_value;
			}
		}
		
		public void setSmoke_value(long value) {
			synchronized(parent) {
				this.smoke_value = value;
			}
		}
		
		private long carbon_value;
		
		public synchronized long getCarbon_value() {
			synchronized(parent) {
				return carbon_value;
			}
		}
		
		public void setCarbon_value(long value) {
			synchronized(parent) {
				this.carbon_value = value;
			}
		}
		
		private long smoke_threshold;
		
		public synchronized long getSmoke_threshold() {
			synchronized(parent) {
				return smoke_threshold;
			}
		}
		
		public void setSmoke_threshold(long value) {
			synchronized(parent) {
				this.smoke_threshold = value;
			}
		}
		
		private long carbon_threshold;
		
		public synchronized long getCarbon_threshold() {
			synchronized(parent) {
				return carbon_threshold;
			}
		}
		
		public void setCarbon_threshold(long value) {
			synchronized(parent) {
				this.carbon_threshold = value;
			}
		}
		
	}
	
	public static class Detect {
		private SmartFireSystem parent;
		
		public Detect(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean smoke;
		
		
		public void raiseSmoke() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					smoke = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean carbon;
		
		
		public void raiseCarbon() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					carbon = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean both;
		
		
		public void raiseBoth() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					both = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean smokeDetected;
		
		public synchronized boolean getSmokeDetected() {
			synchronized(parent) {
				return smokeDetected;
			}
		}
		
		public void setSmokeDetected(boolean value) {
			synchronized(parent) {
				this.smokeDetected = value;
			}
		}
		
		private boolean carbonDetected;
		
		public synchronized boolean getCarbonDetected() {
			synchronized(parent) {
				return carbonDetected;
			}
		}
		
		public void setCarbonDetected(boolean value) {
			synchronized(parent) {
				this.carbonDetected = value;
			}
		}
		
	}
	
	protected Timer timer;
	
	protected Message message;
	
	protected Mode mode;
	
	protected Alarm alarm;
	
	protected Sensors sensors;
	
	protected Detect detect;
	
	public enum State {
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED,
		MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[5];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private BlockingQueue<Runnable> internalEventQueue = new LinkedBlockingQueue<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean local_Mode_warning;
	private boolean local_Mode_danger;
	private boolean local_Mode_safe;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(SmartFireSystem.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(SmartFireSystem.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(SmartFireSystem.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(SmartFireSystem.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public SmartFireSystem() {
		timer = new Timer(this);
		message = new Message(this);
		mode = new Mode(this);
		alarm = new Alarm(this);
		sensors = new Sensors(this);
		detect = new Detect(this);
		for (int i = 0; i < 5; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		timer.setCounter(0l);
		
		timer.setWarning_period(20l);
		
		timer.setFinal_warning_period(30l);
		
		message.setStatus("");
		
		message.setSensor("");
		
		alarm.setThreshold_reached(false);
		
		alarm.setSound(false);
		
		sensors.setSmoke_standby(false);
		
		sensors.setCarbon_standby(false);
		
		sensors.setFire_standby(false);
		
		sensors.setSmoke_value(0l);
		
		sensors.setCarbon_value(0l);
		
		sensors.setSmoke_threshold(100000l);
		
		sensors.setCarbon_threshold(100000l);
		
		detect.setSmokeDetected(false);
		
		detect.setCarbonDetected(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		toggle = false;
		timer.enable = false;
		timer.disable = false;
		timer.reset = false;
		mode.manual_alarm_off = false;
		mode.manual_alarm_on = false;
		detect.smoke = false;
		detect.carbon = false;
		detect.both = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void clearInternalEvents() {
		local_Mode_warning = false;
		local_Mode_danger = false;
		local_Mode_safe = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE:
			transitioned = main_region_smartFireSystem_standby_MainSystem_Safe_react(transitioned);
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING:
			transitioned = main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning_react(transitioned);
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING:
			transitioned = main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning_react(transitioned);
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY:
			transitioned = main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING:
				transitioned = main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY:
				transitioned = main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING:
				transitioned = main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM:
				transitioned = main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE:
				transitioned = main_region_smartFireSystem_standby_Sensors_initialize_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING:
				transitioned = main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY:
				transitioned = main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED:
				transitioned = main_region_smartFireSystem_standby_Timer_disabled_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED:
				transitioned = main_region_smartFireSystem_standby_Timer_running_running_Red_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE:
				transitioned = main_region_smartFireSystem_standby_Timer_running_running_Orange_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL:
				main_region_smartFireSystem_standby_Environment_normal_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED:
				main_region_smartFireSystem_standby_Environment_SmokeDetected_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED:
				main_region_smartFireSystem_standby_Environment_CarbonDetected_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED:
				main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			clearInternalEvents();
			
			nextEvent();
		} while ((((((((((((((((toggle || timer.enable) || timer.disable) || timer.reset) || mode.manual_alarm_off) || mode.manual_alarm_on) || detect.smoke) || detect.carbon) || detect.both) || local_Mode_warning) || local_Mode_danger) || local_Mode_safe) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING:
			return stateVector[2] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY:
			return stateVector[2] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING:
			return stateVector[3].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING.ordinal()&& stateVector[3].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Timer timer() {
		return timer;
	}
	
	public Message message() {
		return message;
	}
	
	public Mode mode() {
		return mode;
	}
	
	public Alarm alarm() {
		return alarm;
	}
	
	public Sensors sensors() {
		return sensors;
	}
	
	public Detect detect() {
		return detect;
	}
	
	
	protected void raiseLocal_Mode_warning() {
		internalEventQueue.add(() -> {
			local_Mode_warning = true;
		});
	}
	
	protected void raiseLocal_Mode_danger() {
		internalEventQueue.add(() -> {
			local_Mode_danger = true;
		});
	}
	
	protected void raiseLocal_Mode_safe() {
		internalEventQueue.add(() -> {
			local_Mode_safe = true;
		});
	}
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(SmartFireSystem.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private boolean on;
	
	
	protected void raiseOn() {
		synchronized(SmartFireSystem.this) {
			on = true;
			onObservable.next(null);
		}
	}
	
	private Observable<Void> onObservable = new Observable<Void>();
	
	public Observable<Void> getOn() {
		return onObservable;
	}
	
	private boolean off;
	
	
	protected void raiseOff() {
		synchronized(SmartFireSystem.this) {
			off = true;
			offObservable.next(null);
		}
	}
	
	private Observable<Void> offObservable = new Observable<Void>();
	
	public Observable<Void> getOff() {
		return offObservable;
	}
	
	/* Entry action for state 'Safe'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Safe() {
		mode.raiseSafe();
		
		timer.raiseDisable();
		
		message.setStatus("SAFE");
		
		timer.setCounter(timer.warning_period);
		
		alarm.setThreshold_reached(false);
		
		alarm.setSound(false);
		
		timer.raiseColor("Orange");
	}
	
	/* Entry action for state 'Warning'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Warning() {
		mode.raiseWarning();
		
		message.setStatus("WARNING");
	}
	
	/* Entry action for state 'initial_warning'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning() {
		timer.raiseEnable();
	}
	
	/* Entry action for state 'final_warning'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning() {
		timer.raiseReset();
	}
	
	/* Entry action for state 'Danger'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Danger() {
		mode.raiseDanger();
		
		timer.raiseDisable();
	}
	
	/* Entry action for state '911_emergency'. */
	private void entryAction_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency() {
		message.setStatus("DANGER! 911 has been notified");
	}
	
	/* Entry action for state 'sensorsActive'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive() {
		sensors.setSmoke_standby(true);
		
		sensors.setCarbon_standby(true);
	}
	
	/* Entry action for state 'smokeSensing'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing() {
		timerService.setTimer(this, 0, (1l * 1000l), false);
		
		sensors.setSmoke_value(sensors.getSmoke_value() + 1l);
	}
	
	/* Entry action for state 'carbonSensing'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing() {
		timerService.setTimer(this, 1, (1l * 1000l), false);
		
		sensors.setCarbon_value(sensors.getCarbon_value() + 1l);
	}
	
	/* Entry action for state 'ThresholdReached'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached() {
		alarm.setThreshold_reached(true);
	}
	
	/* Entry action for state 'SensorWarning'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning() {
		mode.raiseWarning();
	}
	
	/* Entry action for state 'SoundAlarm'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm() {
		alarm.setSound(true);
	}
	
	/* Entry action for state 'initialize'. */
	private void entryAction_main_region_smartFireSystem_standby_Sensors_initialize() {
		message.setSensor("Sensors are on Standby");
		
		sensors.setSmoke_value(0l);
		
		sensors.setCarbon_value(0l);
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_region_smartFireSystem_standby_Timer_running_running_Red() {
		timerService.setTimer(this, 2, (1l * 1000l), false);
		
		timer.setCounter(timer.getCounter() - 1l);
	}
	
	/* Entry action for state 'Orange'. */
	private void entryAction_main_region_smartFireSystem_standby_Timer_running_running_Orange() {
		timerService.setTimer(this, 3, (1l * 1000l), false);
		
		timer.counter--;
	}
	
	/* Entry action for state 'normal'. */
	private void entryAction_main_region_smartFireSystem_standby_Environment_normal() {
		detect.setSmokeDetected(false);
		
		detect.setCarbonDetected(false);
	}
	
	/* Entry action for state 'SmokeDetected'. */
	private void entryAction_main_region_smartFireSystem_standby_Environment_SmokeDetected() {
		detect.setSmokeDetected(true);
		
		message.setSensor("Smoke has been detected");
	}
	
	/* Entry action for state 'CarbonDetected'. */
	private void entryAction_main_region_smartFireSystem_standby_Environment_CarbonDetected() {
		detect.setCarbonDetected(true);
		
		message.setSensor("Carbon has been detected");
	}
	
	/* Entry action for state 'SmokeAndCarbonDetected'. */
	private void entryAction_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected() {
		detect.setSmokeDetected(true);
		
		detect.setCarbonDetected(true);
		
		message.setSensor("Both smoke and carbon have been detected.");
	}
	
	/* Exit action for state 'sensorsActive'. */
	private void exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive() {
		alarm.setThreshold_reached(true);
	}
	
	/* Exit action for state 'smokeSensing'. */
	private void exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing() {
		timerService.unsetTimer(this, 0);
		
		if (sensors.getSmoke_value()>sensors.getSmoke_threshold()) {
			sensors.setSmoke_standby(false);
		}
	}
	
	/* Exit action for state 'carbonSensing'. */
	private void exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing() {
		timerService.unsetTimer(this, 1);
		
		if (sensors.getCarbon_value()>=sensors.getCarbon_threshold()) {
			sensors.setCarbon_standby(false);
		}
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_region_smartFireSystem_standby_Timer_running_running_Red() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Orange'. */
	private void exitAction_main_region_smartFireSystem_standby_Timer_running_running_Orange() {
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state smartFireSystem_standby */
	private void enterSequence_main_region_smartFireSystem_standby_default() {
		enterSequence_main_region_smartFireSystem_standby_MainSystem_default();
		enterSequence_main_region_smartFireSystem_standby_Sensors_default();
		enterSequence_main_region_smartFireSystem_standby_Timer_default();
		enterSequence_main_region_smartFireSystem_standby_Environment_default();
	}
	
	/* 'default' enter sequence for state Safe */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Safe_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Safe();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Warning */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Warning();
		enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_default();
	}
	
	/* 'default' enter sequence for state initial_warning */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state final_warning */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Danger */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Danger();
		enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode_default();
	}
	
	/* 'default' enter sequence for state 911_emergency */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency_default() {
		entryAction_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state sensorsActive */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive();
		enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_default();
		enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_default();
	}
	
	/* 'default' enter sequence for state smokeSensing */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state smokeStandby */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby_default() {
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state carbonSensing */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing();
		stateVector[2] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state carbonStandby */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby_default() {
		stateVector[2] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state ThresholdReached */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached();
		enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_default();
	}
	
	/* 'default' enter sequence for state SensorWarning */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state SoundAlarm */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state initialize */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_initialize_default() {
		entryAction_main_region_smartFireSystem_standby_Sensors_initialize();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state disabled */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_disabled_default() {
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state running */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_running_default() {
		enterSequence_main_region_smartFireSystem_standby_Timer_running_running_default();
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Red_default() {
		entryAction_main_region_smartFireSystem_standby_Timer_running_running_Red();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state Orange */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange_default() {
		entryAction_main_region_smartFireSystem_standby_Timer_running_running_Orange();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_main_region_smartFireSystem_standby_Environment_normal_default() {
		entryAction_main_region_smartFireSystem_standby_Environment_normal();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state SmokeDetected */
	private void enterSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected_default() {
		entryAction_main_region_smartFireSystem_standby_Environment_SmokeDetected();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state CarbonDetected */
	private void enterSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected_default() {
		entryAction_main_region_smartFireSystem_standby_Environment_CarbonDetected();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state SmokeAndCarbonDetected */
	private void enterSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_default() {
		entryAction_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region MainSystem */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_default() {
		react_main_region_smartFireSystem_standby_MainSystem__entry_Default();
	}
	
	/* 'default' enter sequence for region mode */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_default() {
		react_main_region_smartFireSystem_standby_MainSystem_Warning_mode__entry_Default();
	}
	
	/* 'default' enter sequence for region mode */
	private void enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode_default() {
		react_main_region_smartFireSystem_standby_MainSystem_Danger_mode__entry_Default();
	}
	
	/* 'default' enter sequence for region Sensors */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_default() {
		react_main_region_smartFireSystem_standby_Sensors__entry_Default();
	}
	
	/* 'default' enter sequence for region smokeSensor */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_default() {
		react_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor__entry_Default();
	}
	
	/* 'default' enter sequence for region carbonSensor */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_default() {
		react_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor__entry_Default();
	}
	
	/* 'default' enter sequence for region warning_before_sounding */
	private void enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_default() {
		react_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding__entry_Default();
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_default() {
		react_main_region_smartFireSystem_standby_Timer__entry_Default();
	}
	
	/* 'default' enter sequence for region running */
	private void enterSequence_main_region_smartFireSystem_standby_Timer_running_running_default() {
		react_main_region_smartFireSystem_standby_Timer_running_running__entry_Default();
	}
	
	/* 'default' enter sequence for region Environment */
	private void enterSequence_main_region_smartFireSystem_standby_Environment_default() {
		react_main_region_smartFireSystem_standby_Environment__entry_Default();
	}
	
	/* Default exit sequence for state Safe */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Safe() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Warning */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning() {
		exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode();
	}
	
	/* Default exit sequence for state initial_warning */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state final_warning */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Danger */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger() {
		exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode();
	}
	
	/* Default exit sequence for state 911_emergency */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state sensorsActive */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive() {
		exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor();
		exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor();
		exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive();
	}
	
	/* Default exit sequence for state smokeSensing */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing();
	}
	
	/* Default exit sequence for state smokeStandby */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state carbonSensing */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing();
	}
	
	/* Default exit sequence for state carbonStandby */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state ThresholdReached */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached() {
		exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding();
	}
	
	/* Default exit sequence for state SensorWarning */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state SoundAlarm */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state initialize */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_initialize() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state disabled */
	private void exitSequence_main_region_smartFireSystem_standby_Timer_disabled() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state running */
	private void exitSequence_main_region_smartFireSystem_standby_Timer_running() {
		exitSequence_main_region_smartFireSystem_standby_Timer_running_running();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Red() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_region_smartFireSystem_standby_Timer_running_running_Red();
	}
	
	/* Default exit sequence for state Orange */
	private void exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_region_smartFireSystem_standby_Timer_running_running_Orange();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_main_region_smartFireSystem_standby_Environment_normal() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state SmokeDetected */
	private void exitSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state CarbonDetected */
	private void exitSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state SmokeAndCarbonDetected */
	private void exitSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Safe();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM:
			exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_INITIALIZE:
			exitSequence_main_region_smartFireSystem_standby_Sensors_initialize();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing();
			exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby();
			exitAction_main_region_smartFireSystem_standby_Sensors_sensorsActive();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_DISABLED:
			exitSequence_main_region_smartFireSystem_standby_Timer_disabled();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Red();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE:
			exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_NORMAL:
			exitSequence_main_region_smartFireSystem_standby_Environment_normal();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEDETECTED:
			exitSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_CARBONDETECTED:
			exitSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_ENVIRONMENT_SMOKEANDCARBONDETECTED:
			exitSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region mode */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_INITIAL_WARNING:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region mode */
	private void exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER_MODE__911_EMERGENCY:
			exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smokeSensor */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor() {
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESENSING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_SMOKESENSOR_SMOKESTANDBY:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region carbonSensor */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor() {
		switch (stateVector[2]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSENSING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_SENSORSACTIVE_CARBONSENSOR_CARBONSTANDBY:
			exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region warning_before_sounding */
	private void exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding() {
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SENSORWARNING:
			exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_SENSORS_THRESHOLDREACHED_WARNING_BEFORE_SOUNDING_SOUNDALARM:
			exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running */
	private void exitSequence_main_region_smartFireSystem_standby_Timer_running_running() {
		switch (stateVector[3]) {
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Red();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_ORANGE:
			exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_smartFireSystem_standby_Timer_running_running__choice_0() {
		if (isStateActive(State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_WARNING_MODE_FINAL_WARNING)) {
			timer.raiseColor("Red");
			
			timer.setCounter(timer.final_warning_period);
			
			enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Red_default();
		} else {
			timer.raiseColor("Orange");
			
			timer.setCounter(timer.warning_period);
			
			enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_MainSystem__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_MainSystem_Safe_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_MainSystem_Warning_mode__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_MainSystem_Danger_mode__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Sensors__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Sensors_initialize_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Timer_running_running__entry_Default() {
		react_main_region_smartFireSystem_standby_Timer_running_running__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Timer__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Timer_disabled_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_smartFireSystem_standby_Environment__entry_Default() {
		enterSequence_main_region_smartFireSystem_standby_Environment_normal_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_smartFireSystem_standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Safe_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (local_Mode_warning) {
				exitSequence_main_region_smartFireSystem_standby_MainSystem_Safe();
				enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_default();
				transitioned_after = 0l;
			} else {
				if ((local_Mode_danger || mode.manual_alarm_on)) {
					exitSequence_main_region_smartFireSystem_standby_MainSystem_Safe();
					enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (mode.manual_alarm_off) {
				exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning();
				enterSequence_main_region_smartFireSystem_standby_MainSystem_Safe_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (timer.getCounter()<=0l) {
				exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_initial_warning();
				enterSequence_main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning_default();
				main_region_smartFireSystem_standby_MainSystem_Warning_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_MainSystem_Warning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Warning_mode_final_warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (isStateActive(State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_TIMER_RUNNING_RUNNING_RED)) {
				exitSequence_main_region_smartFireSystem_standby_MainSystem_Warning();
				enterSequence_main_region_smartFireSystem_standby_MainSystem_Danger_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_MainSystem_Warning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Danger_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if ((local_Mode_safe || mode.manual_alarm_off)) {
				exitSequence_main_region_smartFireSystem_standby_MainSystem_Danger();
				enterSequence_main_region_smartFireSystem_standby_MainSystem_Safe_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_MainSystem_Danger_mode__911_emergency_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_MainSystem_Danger_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_sensorsActive_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (isStateActive(State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_DANGER)) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive();
				entryAction_main_region_smartFireSystem_standby_Sensors_ThresholdReached();
				enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (sensors.getSmoke_value()>=sensors.getSmoke_threshold()) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive();
				sensors.setSmoke_standby(false);
				
				message.setSensor("Smoke threshold has been reached");
				
				enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_default();
				transitioned_after = 1l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing();
					timeEvents[0] = false;
					enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if ((detect.smoke || detect.both)) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeStandby();
				enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_smokeSensor_smokeSensing_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (sensors.getCarbon_value()>=sensors.getCarbon_threshold()) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive();
				sensors.setCarbon_standby(false);
				
				message.setSensor("Carbon threshold has been reached");
				
				enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_default();
				transitioned_after = 2l;
			} else {
				if (timeEvents[1]) {
					exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing();
					timeEvents[1] = false;
					enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing_default();
					main_region_smartFireSystem_standby_Sensors_sensorsActive_react(1l);
					
					transitioned_after = 2l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Sensors_sensorsActive_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if ((detect.carbon || detect.both)) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonStandby();
				enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_carbonSensor_carbonSensing_default();
				main_region_smartFireSystem_standby_Sensors_sensorsActive_react(1l);
				
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Sensors_sensorsActive_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_ThresholdReached_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (local_Mode_safe) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached();
				enterSequence_main_region_smartFireSystem_standby_Sensors_initialize_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (local_Mode_danger) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SensorWarning();
				enterSequence_main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm_default();
				main_region_smartFireSystem_standby_Sensors_ThresholdReached_react(1l);
				
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Sensors_ThresholdReached_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_ThresholdReached_warning_before_sounding_SoundAlarm_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Sensors_ThresholdReached_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Sensors_initialize_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (isStateActive(State.MAIN_REGION_SMARTFIRESYSTEM_STANDBY_MAINSYSTEM_SAFE)) {
				exitSequence_main_region_smartFireSystem_standby_Sensors_initialize();
				enterSequence_main_region_smartFireSystem_standby_Sensors_sensorsActive_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Timer_disabled_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timer.enable) {
				exitSequence_main_region_smartFireSystem_standby_Timer_disabled();
				enterSequence_main_region_smartFireSystem_standby_Timer_running_default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Timer_running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timer.disable) {
				exitSequence_main_region_smartFireSystem_standby_Timer_running();
				enterSequence_main_region_smartFireSystem_standby_Timer_disabled_default();
				transitioned_after = 3l;
			} else {
				if (timer.reset) {
					exitSequence_main_region_smartFireSystem_standby_Timer_running();
					enterSequence_main_region_smartFireSystem_standby_Timer_running_default();
					transitioned_after = 3l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Timer_running_running_Red_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[2]) {
				exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Red();
				timeEvents[2] = false;
				enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Red_default();
				main_region_smartFireSystem_standby_Timer_running_react(3l);
				
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Timer_running_running_Orange_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[3]) {
				exitSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange();
				timeEvents[3] = false;
				enterSequence_main_region_smartFireSystem_standby_Timer_running_running_Orange_default();
				main_region_smartFireSystem_standby_Timer_running_react(3l);
				
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_Timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Environment_normal_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (detect.smoke) {
				exitSequence_main_region_smartFireSystem_standby_Environment_normal();
				enterSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected_default();
				main_region_smartFireSystem_standby_react(0l);
				
				transitioned_after = 4l;
			} else {
				if (detect.carbon) {
					exitSequence_main_region_smartFireSystem_standby_Environment_normal();
					enterSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected_default();
					main_region_smartFireSystem_standby_react(0l);
					
					transitioned_after = 4l;
				} else {
					if (detect.both) {
						exitSequence_main_region_smartFireSystem_standby_Environment_normal();
						enterSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_default();
						main_region_smartFireSystem_standby_react(0l);
						
						transitioned_after = 4l;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Environment_SmokeDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (local_Mode_safe) {
				exitSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected();
				enterSequence_main_region_smartFireSystem_standby_Environment_normal_default();
				main_region_smartFireSystem_standby_react(0l);
				
				transitioned_after = 4l;
			} else {
				if (detect.carbon) {
					exitSequence_main_region_smartFireSystem_standby_Environment_SmokeDetected();
					enterSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_default();
					main_region_smartFireSystem_standby_react(0l);
					
					transitioned_after = 4l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Environment_CarbonDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (local_Mode_safe) {
				exitSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected();
				enterSequence_main_region_smartFireSystem_standby_Environment_normal_default();
				main_region_smartFireSystem_standby_react(0l);
				
				transitioned_after = 4l;
			} else {
				if (detect.smoke) {
					exitSequence_main_region_smartFireSystem_standby_Environment_CarbonDetected();
					enterSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_default();
					main_region_smartFireSystem_standby_react(0l);
					
					transitioned_after = 4l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (local_Mode_safe) {
				exitSequence_main_region_smartFireSystem_standby_Environment_SmokeAndCarbonDetected();
				enterSequence_main_region_smartFireSystem_standby_Environment_normal_default();
				main_region_smartFireSystem_standby_react(0l);
				
				transitioned_after = 4l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_smartFireSystem_standby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
