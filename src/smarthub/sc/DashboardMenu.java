/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import smarthub.sc.LED;
import smarthub.sc.SmartFireSystem;
import smarthub.sc.SmartLightSystem;
import smarthub.sc.SmartTVSystem;

public class DashboardMenu implements IStatemachine {
	public static class MessageHandler {
		private DashboardMenu parent;
		
		public MessageHandler(DashboardMenu parent) {
			this.parent = parent;
		}
		private boolean message;
		
		private String messageValue;
		
		
		protected void raiseMessage(String value) {
			synchronized(parent) {
				messageValue = value;
				message = true;
				messageObservable.next(value);
			}
		}
		
		private Observable<String> messageObservable = new Observable<String>();
		
		public Observable<String> getMessage() {
			return messageObservable;
		}
		
	}
	
	public static class HUB {
		private DashboardMenu parent;
		
		public HUB(DashboardMenu parent) {
			this.parent = parent;
		}
		private boolean turnon_allsystem;
		
		
		public void raiseTurnon_allsystem() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					turnon_allsystem = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean turnoff_allsystem;
		
		
		public void raiseTurnoff_allsystem() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					turnoff_allsystem = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean bootAllSystems;
		
		public synchronized boolean getBootAllSystems() {
			synchronized(parent) {
				return bootAllSystems;
			}
		}
		
		public void setBootAllSystems(boolean value) {
			synchronized(parent) {
				this.bootAllSystems = value;
			}
		}
		
	}
	
	public static class STV {
		private DashboardMenu parent;
		
		public STV(DashboardMenu parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private boolean wiFi_status;
		
		public synchronized boolean getWiFi_status() {
			synchronized(parent) {
				return wiFi_status;
			}
		}
		
		public void setWiFi_status(boolean value) {
			synchronized(parent) {
				this.wiFi_status = value;
			}
		}
		
		private long heat_level;
		
		public synchronized long getHeat_level() {
			synchronized(parent) {
				return heat_level;
			}
		}
		
		public void setHeat_level(long value) {
			synchronized(parent) {
				this.heat_level = value;
			}
		}
		
		private boolean overheat;
		
		public synchronized boolean getOverheat() {
			synchronized(parent) {
				return overheat;
			}
		}
		
		public void setOverheat(boolean value) {
			synchronized(parent) {
				this.overheat = value;
			}
		}
		
	}
	
	public static class SL {
		private DashboardMenu parent;
		
		public SL(DashboardMenu parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private long queu_size;
		
		public synchronized long getQueu_size() {
			synchronized(parent) {
				return queu_size;
			}
		}
		
		public void setQueu_size(long value) {
			synchronized(parent) {
				this.queu_size = value;
			}
		}
		
		private boolean wiFi_connection;
		
		public synchronized boolean getWiFi_connection() {
			synchronized(parent) {
				return wiFi_connection;
			}
		}
		
		public void setWiFi_connection(boolean value) {
			synchronized(parent) {
				this.wiFi_connection = value;
			}
		}
		
		private boolean server_connection;
		
		public synchronized boolean getServer_connection() {
			synchronized(parent) {
				return server_connection;
			}
		}
		
		public void setServer_connection(boolean value) {
			synchronized(parent) {
				this.server_connection = value;
			}
		}
		
		private long timeout;
		
		public synchronized long getTimeout() {
			synchronized(parent) {
				return timeout;
			}
		}
		
		public void setTimeout(long value) {
			synchronized(parent) {
				this.timeout = value;
			}
		}
		
		private long temperature;
		
		public synchronized long getTemperature() {
			synchronized(parent) {
				return temperature;
			}
		}
		
		public void setTemperature(long value) {
			synchronized(parent) {
				this.temperature = value;
			}
		}
		
		private boolean overheat;
		
		public synchronized boolean getOverheat() {
			synchronized(parent) {
				return overheat;
			}
		}
		
		public void setOverheat(boolean value) {
			synchronized(parent) {
				this.overheat = value;
			}
		}
		
	}
	
	public static class SF {
		private DashboardMenu parent;
		
		public SF(DashboardMenu parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean hUB_reset;
		
		
		public void raiseHUB_reset() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					hUB_reset = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private boolean safe;
		
		
		protected void raiseSafe() {
			synchronized(parent) {
				safe = true;
				safeObservable.next(null);
			}
		}
		
		private Observable<Void> safeObservable = new Observable<Void>();
		
		public Observable<Void> getSafe() {
			return safeObservable;
		}
		
		private boolean warning;
		
		
		protected void raiseWarning() {
			synchronized(parent) {
				warning = true;
				warningObservable.next(null);
			}
		}
		
		private Observable<Void> warningObservable = new Observable<Void>();
		
		public Observable<Void> getWarning() {
			return warningObservable;
		}
		
		private boolean danger;
		
		
		protected void raiseDanger() {
			synchronized(parent) {
				danger = true;
				dangerObservable.next(null);
			}
		}
		
		private Observable<Void> dangerObservable = new Observable<Void>();
		
		public Observable<Void> getDanger() {
			return dangerObservable;
		}
		
		private String sensor_trigger;
		
		public synchronized String getSensor_trigger() {
			synchronized(parent) {
				return sensor_trigger;
			}
		}
		
		public void setSensor_trigger(String value) {
			synchronized(parent) {
				this.sensor_trigger = value;
			}
		}
		
	}
	
	protected MessageHandler messageHandler;
	
	protected HUB hUB;
	
	protected STV sTV;
	
	protected SL sL;
	
	protected SF sF;
	
	public enum State {
		MAIN_MAIN,
		MAIN_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(DashboardMenu.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(DashboardMenu.this) {
			this.isExecuting = value;
		}
	}
	private boolean stateConfVectorChanged;
	
	protected boolean getStateConfVectorChanged() {
		synchronized(DashboardMenu.this) {
			return stateConfVectorChanged;
		}
	}
	
	protected void setStateConfVectorChanged(boolean value) {
		synchronized(DashboardMenu.this) {
			this.stateConfVectorChanged = value;
		}
	}
	public DashboardMenu() {
		messageHandler = new MessageHandler(this);
		hUB = new HUB(this);
		sTV = new STV(this);
		sL = new SL(this);
		sF = new SF(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		hUB.setBootAllSystems(false);
		
		sTV.setWiFi_status(false);
		
		sTV.setHeat_level(0);
		
		sTV.setOverheat(false);
		
		sL.setQueu_size(0);
		
		sL.setWiFi_connection(false);
		
		sL.setServer_connection(false);
		
		sL.setTimeout(0);
		
		sL.setTemperature(0);
		
		sL.setOverheat(false);
		
		sF.setSensor_trigger("");
		
		setSmartFireSC(null);
		
		setSmartLightSC(null);
		
		setSmartTVSC(null);
		
		setLed(null);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_default();
		do { 
			stateConfVectorChanged = false;
			
			microStep();
		} while (getStateConfVectorChanged());
		
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		hUB.turnon_allsystem = false;
		hUB.turnoff_allsystem = false;
		sTV.off = false;
		sTV.on = false;
		sL.off = false;
		sL.on = false;
		sF.off = false;
		sF.on = false;
		sF.hUB_reset = false;
		toggle = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_MAIN:
			main_main_react(-1);
			break;
		case MAIN_OFF:
			main_off_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			do { 
				stateConfVectorChanged = false;
				
				microStep();
			} while (getStateConfVectorChanged());
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((((hUB.turnon_allsystem || hUB.turnoff_allsystem) || sTV.off) || sTV.on) || sL.off) || sL.on) || sF.off) || sF.on) || sF.hUB_reset) || toggle));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MAIN:
			return stateVector[0] == State.MAIN_MAIN;
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		default:
			return false;
		}
	}
	
	public MessageHandler messageHandler() {
		return messageHandler;
	}
	
	public HUB hUB() {
		return hUB;
	}
	
	public STV sTV() {
		return sTV;
	}
	
	public SL sL() {
		return sL;
	}
	
	public SF sF() {
		return sF;
	}
	
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(DashboardMenu.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private SmartFireSystem smartFireSC;
	
	public synchronized SmartFireSystem getSmartFireSC() {
		synchronized(DashboardMenu.this) {
			return smartFireSC;
		}
	}
	
	public void setSmartFireSC(SmartFireSystem value) {
		synchronized(DashboardMenu.this) {
			this.smartFireSC = value;
		}
	}
	
	private SmartLightSystem smartLightSC;
	
	public synchronized SmartLightSystem getSmartLightSC() {
		synchronized(DashboardMenu.this) {
			return smartLightSC;
		}
	}
	
	public void setSmartLightSC(SmartLightSystem value) {
		synchronized(DashboardMenu.this) {
			this.smartLightSC = value;
		}
	}
	
	private SmartTVSystem smartTVSC;
	
	public synchronized SmartTVSystem getSmartTVSC() {
		synchronized(DashboardMenu.this) {
			return smartTVSC;
		}
	}
	
	public void setSmartTVSC(SmartTVSystem value) {
		synchronized(DashboardMenu.this) {
			this.smartTVSC = value;
		}
	}
	
	private LED led;
	
	public synchronized LED getLed() {
		synchronized(DashboardMenu.this) {
			return led;
		}
	}
	
	public void setLed(LED value) {
		synchronized(DashboardMenu.this) {
			this.led = value;
		}
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_main_default() {
		stateVector[0] = State.MAIN_MAIN;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_off_default() {
		stateVector[0] = State.MAIN_OFF;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_main() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_off() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_MAIN:
			exitSequence_main_main();
			break;
		case MAIN_OFF:
			exitSequence_main_off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_main_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_main_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (toggle) {
				exitSequence_main_main();
				enterSequence_main_off_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (toggle) {
				exitSequence_main_off();
				enterSequence_main_main_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
