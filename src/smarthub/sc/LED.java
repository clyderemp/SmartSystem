/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import smarthub.sc.SmartLightSystem;

public class LED implements IStatemachine, ITimed {
	public static class Light {
		private LED parent;
		
		public Light(LED parent) {
			this.parent = parent;
		}
		private boolean warm;
		
		public synchronized boolean getWarm() {
			synchronized(parent) {
				return warm;
			}
		}
		
		public void setWarm(boolean value) {
			synchronized(parent) {
				this.warm = value;
			}
		}
		
		private long temperature;
		
		public synchronized long getTemperature() {
			synchronized(parent) {
				return temperature;
			}
		}
		
		public void setTemperature(long value) {
			synchronized(parent) {
				this.temperature = value;
			}
		}
		
		private long threshold;
		
		public synchronized long getThreshold() {
			synchronized(parent) {
				return threshold;
			}
		}
		
		public void setThreshold(long value) {
			synchronized(parent) {
				this.threshold = value;
			}
		}
		
	}
	
	public static class Wifi {
		private LED parent;
		
		public Wifi(LED parent) {
			this.parent = parent;
		}
		private boolean error;
		
		
		protected void raiseError() {
			synchronized(parent) {
				error = true;
				errorObservable.next(null);
			}
		}
		
		private Observable<Void> errorObservable = new Observable<Void>();
		
		public Observable<Void> getError() {
			return errorObservable;
		}
		
		private boolean connection;
		
		public synchronized boolean getConnection() {
			synchronized(parent) {
				return connection;
			}
		}
		
		public void setConnection(boolean value) {
			synchronized(parent) {
				this.connection = value;
			}
		}
		
	}
	
	public static class Power {
		private LED parent;
		
		public Power(LED parent) {
			this.parent = parent;
		}
		private long kilowatt;
		
		public synchronized long getKilowatt() {
			synchronized(parent) {
				return kilowatt;
			}
		}
		
		public void setKilowatt(long value) {
			synchronized(parent) {
				this.kilowatt = value;
			}
		}
		
		private long totalTime;
		
		public synchronized long getTotalTime() {
			synchronized(parent) {
				return totalTime;
			}
		}
		
		public void setTotalTime(long value) {
			synchronized(parent) {
				this.totalTime = value;
			}
		}
		
		private long electricConsumption;
		
		public synchronized long getElectricConsumption() {
			synchronized(parent) {
				return electricConsumption;
			}
		}
		
		public void setElectricConsumption(long value) {
			synchronized(parent) {
				this.electricConsumption = value;
			}
		}
		
	}
	
	protected Light light;
	
	protected Wifi wifi;
	
	protected Power power;
	
	public enum State {
		MAIN_REGION_SMARTLIGHTSYSTEM,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP,
		MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT,
		MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION,
		MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER,
		MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS,
		MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL,
		MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT,
		MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF,
		MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> internalEventQueue = new LinkedBlockingQueue<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean local_lightOFF;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(LED.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(LED.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(LED.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(LED.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public LED() {
		light = new Light(this);
		wifi = new Wifi(this);
		power = new Power(this);
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		setIsLightON(false);
		
		setOverheat(false);
		
		light.setWarm(false);
		
		light.setTemperature(0l);
		
		light.setThreshold(50l);
		
		wifi.setConnection(false);
		
		power.setKilowatt(1l);
		
		power.setTotalTime(0l);
		
		power.setElectricConsumption(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		idle = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void clearInternalEvents() {
		local_lightOFF = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN:
			transitioned = main_region_SmartLightSystem_r1_Off_idle_region_cooling_down_react(transitioned);
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY:
			transitioned = main_region_SmartLightSystem_r1_Off_idle_region_standby_react(transitioned);
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP:
			transitioned = main_region_SmartLightSystem_r1_On_light_temperature_warming_up_react(transitioned);
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT:
			transitioned = main_region_SmartLightSystem_r1_On_light_temperature_overheat_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
				transitioned = main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success_react(transitioned);
				break;
			case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
				transitioned = main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail_react(transitioned);
				break;
			case MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT:
				transitioned = main_region_SmartLightSystem_r2_networkTimeout_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF:
				main_region_SmartLightSystem_r3_off_react(transitioned);
				break;
			case MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER:
				main_region_SmartLightSystem_r3_consuming_power_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			clearInternalEvents();
			
			nextEvent();
		} while ((((((((((((on || off) || idle) || local_lightOFF) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_SMARTLIGHTSYSTEM:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTLIGHTSYSTEM.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER.ordinal();
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY.ordinal();
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN:
			return stateVector[0] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY:
			return stateVector[0] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT.ordinal();
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP:
			return stateVector[0] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT:
			return stateVector[0] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL.ordinal();
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL.ordinal();
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			return stateVector[1] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			return stateVector[1] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT:
			return stateVector[1] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF:
			return stateVector[2] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER:
			return stateVector[2] == State.MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Light light() {
		return light;
	}
	
	public Wifi wifi() {
		return wifi;
	}
	
	public Power power() {
		return power;
	}
	
	
	protected void raiseLocal_lightOFF() {
		internalEventQueue.add(() -> {
			local_lightOFF = true;
		});
	}
	
	private boolean on;
	
	
	public void raiseOn() {
		synchronized(LED.this) {
			inEventQueue.add(() -> {
				on = true;
			});
			runCycle();
		}
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		synchronized(LED.this) {
			inEventQueue.add(() -> {
				off = true;
			});
			runCycle();
		}
	}
	
	private boolean idle;
	
	
	public void raiseIdle() {
		synchronized(LED.this) {
			inEventQueue.add(() -> {
				idle = true;
			});
			runCycle();
		}
	}
	
	private boolean lightON;
	
	
	protected void raiseLightON() {
		synchronized(LED.this) {
			lightON = true;
			lightONObservable.next(null);
		}
	}
	
	private Observable<Void> lightONObservable = new Observable<Void>();
	
	public Observable<Void> getLightON() {
		return lightONObservable;
	}
	
	private boolean lightOFF;
	
	
	protected void raiseLightOFF() {
		synchronized(LED.this) {
			lightOFF = true;
			lightOFFObservable.next(null);
			raiseLocal_lightOFF();
		}
	}
	
	private Observable<Void> lightOFFObservable = new Observable<Void>();
	
	public Observable<Void> getLightOFF() {
		return lightOFFObservable;
	}
	
	private boolean isLightON;
	
	public synchronized boolean getIsLightON() {
		synchronized(LED.this) {
			return isLightON;
		}
	}
	
	public void setIsLightON(boolean value) {
		synchronized(LED.this) {
			this.isLightON = value;
		}
	}
	
	private boolean overheat;
	
	public synchronized boolean getOverheat() {
		synchronized(LED.this) {
			return overheat;
		}
	}
	
	public void setOverheat(boolean value) {
		synchronized(LED.this) {
			this.overheat = value;
		}
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_region_SmartLightSystem_r1_Off() {
		raiseLightOFF();
		
		setIsLightON(false);
	}
	
	/* Entry action for state 'cooling_down'. */
	private void entryAction_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down() {
		timerService.setTimer(this, 0, (12l * 1000l), false);
		
		timerService.setTimer(this, 1, (1l * 1000l), false);
		
		light.setTemperature(light.getTemperature() - 1l);
		
		light.setWarm(false);
		
		raiseLightOFF();
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_main_region_SmartLightSystem_r1_On() {
		raiseLightON();
		
		setIsLightON(true);
	}
	
	/* Entry action for state 'warming_up'. */
	private void entryAction_main_region_SmartLightSystem_r1_On_light_temperature_warming_up() {
		timerService.setTimer(this, 2, (12l * 1000l), false);
		
		timerService.setTimer(this, 3, 500l, false);
		
		light.setTemperature(light.getTemperature() + 1l);
		
		light.setWarm(true);
	}
	
	/* Entry action for state 'overheat'. */
	private void entryAction_main_region_SmartLightSystem_r1_On_light_temperature_overheat() {
		raiseOff();
		
		setOverheat(true);
	}
	
	/* Entry action for state 'connectToServer'. */
	private void entryAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer() {
		timerService.setTimer(this, 4, (10l * 1000l), false);
	}
	
	/* Entry action for state 'fail'. */
	private void entryAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		timerService.setTimer(this, 5, (2l * 1000l), false);
	}
	
	/* Entry action for state 'networkTimeout'. */
	private void entryAction_main_region_SmartLightSystem_r2_networkTimeout() {
		timerService.setTimer(this, 6, (5l * 1000l), false);
		
		wifi.setConnection(false);
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartLightSystem_r3_off() {
		power.setTotalTime(0l);
	}
	
	/* Entry action for state 'consuming_power'. */
	private void entryAction_main_region_SmartLightSystem_r3_consuming_power() {
		timerService.setTimer(this, 7, (1l * 1000l), false);
		
		power.setElectricConsumption((power.kilowatt * power.totalTime));
	}
	
	/* Exit action for state 'cooling_down'. */
	private void exitAction_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down() {
		timerService.unsetTimer(this, 0);
		
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'warming_up'. */
	private void exitAction_main_region_SmartLightSystem_r1_On_light_temperature_warming_up() {
		timerService.unsetTimer(this, 2);
		
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'connectToServer'. */
	private void exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'fail'. */
	private void exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'networkTimeout'. */
	private void exitAction_main_region_SmartLightSystem_r2_networkTimeout() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'consuming_power'. */
	private void exitAction_main_region_SmartLightSystem_r3_consuming_power() {
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_SmartLightSystem_r1_Off_default() {
		entryAction_main_region_SmartLightSystem_r1_Off();
		enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_default();
	}
	
	/* 'default' enter sequence for state cooling_down */
	private void enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down_default() {
		entryAction_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
		stateVector[0] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state standby */
	private void enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby_default() {
		stateVector[0] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_SmartLightSystem_r1_On_default() {
		entryAction_main_region_SmartLightSystem_r1_On();
		enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_default();
	}
	
	/* 'default' enter sequence for state warming_up */
	private void enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up_default() {
		entryAction_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
		stateVector[0] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state overheat */
	private void enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_overheat_default() {
		entryAction_main_region_SmartLightSystem_r1_On_light_temperature_overheat();
		stateVector[0] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state checkForWiFiConnection */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_default() {
		enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_default();
	}
	
	/* 'default' enter sequence for state connectToServer */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_default() {
		entryAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
		enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_default();
	}
	
	/* 'default' enter sequence for state success */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success_default() {
		stateVector[1] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state fail */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail_default() {
		entryAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail();
		stateVector[1] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state networkTimeout */
	private void enterSequence_main_region_SmartLightSystem_r2_networkTimeout_default() {
		entryAction_main_region_SmartLightSystem_r2_networkTimeout();
		stateVector[1] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartLightSystem_r3_off_default() {
		entryAction_main_region_SmartLightSystem_r3_off();
		stateVector[2] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state consuming_power */
	private void enterSequence_main_region_SmartLightSystem_r3_consuming_power_default() {
		entryAction_main_region_SmartLightSystem_r3_consuming_power();
		stateVector[2] = State.MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region idle_region */
	private void enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_default() {
		react_main_region_SmartLightSystem_r1_Off_idle_region__entry_Default();
	}
	
	/* 'default' enter sequence for region light_temperature */
	private void enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_default() {
		react_main_region_SmartLightSystem_r1_On_light_temperature__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_SmartLightSystem_r2_default() {
		react_main_region_SmartLightSystem_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_default() {
		react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_default() {
		react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_main_region_SmartLightSystem_r3_default() {
		react_main_region_SmartLightSystem_r3__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_SmartLightSystem_r1_Off() {
		exitSequence_main_region_SmartLightSystem_r1_Off_idle_region();
	}
	
	/* Default exit sequence for state cooling_down */
	private void exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
	}
	
	/* Default exit sequence for state standby */
	private void exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_SmartLightSystem_r1_On() {
		exitSequence_main_region_SmartLightSystem_r1_On_light_temperature();
	}
	
	/* Default exit sequence for state warming_up */
	private void exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
	}
	
	/* Default exit sequence for state overheat */
	private void exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_overheat() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state checkForWiFiConnection */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection() {
		exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1();
	}
	
	/* Default exit sequence for state connectToServer */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer() {
		exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1();
		exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
	}
	
	/* Default exit sequence for state success */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state fail */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail();
	}
	
	/* Default exit sequence for state networkTimeout */
	private void exitSequence_main_region_SmartLightSystem_r2_networkTimeout() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_SmartLightSystem_r2_networkTimeout();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartLightSystem_r3_off() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state consuming_power */
	private void exitSequence_main_region_SmartLightSystem_r3_consuming_power() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_region_SmartLightSystem_r3_consuming_power();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN:
			exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY:
			exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP:
			exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT:
			exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_overheat();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success();
			exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail();
			exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_NETWORKTIMEOUT:
			exitSequence_main_region_SmartLightSystem_r2_networkTimeout();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R3_OFF:
			exitSequence_main_region_SmartLightSystem_r3_off();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R3_CONSUMING_POWER:
			exitSequence_main_region_SmartLightSystem_r3_consuming_power();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region idle_region */
	private void exitSequence_main_region_SmartLightSystem_r1_Off_idle_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_COOLING_DOWN:
			exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_OFF_IDLE_REGION_STANDBY:
			exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region light_temperature */
	private void exitSequence_main_region_SmartLightSystem_r1_On_light_temperature() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_WARMING_UP:
			exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R1_ON_LIGHT_TEMPERATURE_OVERHEAT:
			exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_overheat();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1() {
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success();
			exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail();
			exitAction_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1() {
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success();
			break;
		case MAIN_REGION_SMARTLIGHTSYSTEM_R2_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1__choice_0() {
		if (wifi.getConnection()) {
			enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success_default();
		} else {
			enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r1_Off_default();
		enterSequence_main_region_SmartLightSystem_r2_default();
		enterSequence_main_region_SmartLightSystem_r3_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r1_Off_idle_region__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r1_On_light_temperature__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1__entry_Default() {
		react_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r2__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartLightSystem_r3__entry_Default() {
		enterSequence_main_region_SmartLightSystem_r3_off_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_SmartLightSystem_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_Off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (on) {
				exitSequence_main_region_SmartLightSystem_r1_Off();
				enterSequence_main_region_SmartLightSystem_r1_On_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_Off_idle_region_cooling_down_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (timeEvents[0]) {
				exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
				timeEvents[0] = false;
				enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down_default();
				main_region_SmartLightSystem_r1_Off_react(0l);
				
				transitioned_after = 0l;
			} else {
				if (((timeEvents[1]) && (light.getTemperature()<=0l))) {
					exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down();
					light.setWarm(false);
					
					setOverheat(false);
					
					timeEvents[1] = false;
					enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby_default();
					main_region_SmartLightSystem_r1_Off_react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r1_Off_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_Off_idle_region_standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (((local_lightOFF) && (light.getTemperature()>0l))) {
				exitSequence_main_region_SmartLightSystem_r1_Off_idle_region_standby();
				enterSequence_main_region_SmartLightSystem_r1_Off_idle_region_cooling_down_default();
				main_region_SmartLightSystem_r1_Off_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r1_Off_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_On_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (off) {
				exitSequence_main_region_SmartLightSystem_r1_On();
				enterSequence_main_region_SmartLightSystem_r1_Off_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_On_light_temperature_warming_up_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (timeEvents[2]) {
				exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
				timeEvents[2] = false;
				enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up_default();
				main_region_SmartLightSystem_r1_On_react(0l);
				
				transitioned_after = 0l;
			} else {
				if (((timeEvents[3]) && (light.getTemperature()>=light.getThreshold()))) {
					exitSequence_main_region_SmartLightSystem_r1_On_light_temperature_warming_up();
					timeEvents[3] = false;
					enterSequence_main_region_SmartLightSystem_r1_On_light_temperature_overheat_default();
					main_region_SmartLightSystem_r1_On_react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r1_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r1_On_light_temperature_overheat_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r1_On_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r2_checkForWiFiConnection_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (timeEvents[4]) {
				exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection();
				timeEvents[4] = false;
				enterSequence_main_region_SmartLightSystem_r2_networkTimeout_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			wifi.setConnection(true);
			
			transitioned_after = main_region_SmartLightSystem_r2_checkForWiFiConnection_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_success_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_r1_fail_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (timeEvents[5]) {
				exitSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer();
				wifi.setConnection(true);
				
				timeEvents[5] = false;
				enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_default();
				main_region_SmartLightSystem_r2_checkForWiFiConnection_react(1l);
				
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r2_networkTimeout_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (timeEvents[6]) {
				exitSequence_main_region_SmartLightSystem_r2_networkTimeout();
				timeEvents[6] = false;
				enterSequence_main_region_SmartLightSystem_r2_checkForWiFiConnection_r1_connectToServer_default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r3_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (on) {
				exitSequence_main_region_SmartLightSystem_r3_off();
				enterSequence_main_region_SmartLightSystem_r3_consuming_power_default();
				main_region_SmartLightSystem_react(0l);
				
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartLightSystem_r3_consuming_power_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (timeEvents[7]) {
				exitSequence_main_region_SmartLightSystem_r3_consuming_power();
				power.totalTime++;
				
				timeEvents[7] = false;
				enterSequence_main_region_SmartLightSystem_r3_consuming_power_default();
				main_region_SmartLightSystem_react(0l);
				
				transitioned_after = 2l;
			} else {
				if (off) {
					exitSequence_main_region_SmartLightSystem_r3_consuming_power();
					enterSequence_main_region_SmartLightSystem_r3_off_default();
					main_region_SmartLightSystem_react(0l);
					
					transitioned_after = 2l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartLightSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
