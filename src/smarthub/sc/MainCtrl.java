/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class MainCtrl implements IStatemachine, ITimed {
	public static class MessageHandler {
		private MainCtrl parent;
		
		public MessageHandler(MainCtrl parent) {
			this.parent = parent;
		}
		private boolean message;
		
		private String messageValue;
		
		
		protected void raiseMessage(String value) {
			synchronized(parent) {
				messageValue = value;
				message = true;
				messageObservable.next(value);
			}
		}
		
		private Observable<String> messageObservable = new Observable<String>();
		
		public Observable<String> getMessage() {
			return messageObservable;
		}
		
	}
	
	public static class AlarmLight {
		private MainCtrl parent;
		
		public AlarmLight(MainCtrl parent) {
			this.parent = parent;
		}
		private boolean displayRed;
		
		
		protected void raiseDisplayRed() {
			synchronized(parent) {
				displayRed = true;
				displayRedObservable.next(null);
			}
		}
		
		private Observable<Void> displayRedObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayRed() {
			return displayRedObservable;
		}
		
		private boolean displayGreen;
		
		
		protected void raiseDisplayGreen() {
			synchronized(parent) {
				displayGreen = true;
				displayGreenObservable.next(null);
			}
		}
		
		private Observable<Void> displayGreenObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayGreen() {
			return displayGreenObservable;
		}
		
		private boolean displayYellow;
		
		
		protected void raiseDisplayYellow() {
			synchronized(parent) {
				displayYellow = true;
				displayYellowObservable.next(null);
			}
		}
		
		private Observable<Void> displayYellowObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayYellow() {
			return displayYellowObservable;
		}
		
		private boolean displayNone;
		
		
		protected void raiseDisplayNone() {
			synchronized(parent) {
				displayNone = true;
				displayNoneObservable.next(null);
			}
		}
		
		private Observable<Void> displayNoneObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayNone() {
			return displayNoneObservable;
		}
		
	}
	
	public static class Timer {
		private MainCtrl parent;
		
		public Timer(MainCtrl parent) {
			this.parent = parent;
		}
		private boolean updateTimerColour;
		
		private String updateTimerColourValue;
		
		
		protected void raiseUpdateTimerColour(String value) {
			synchronized(parent) {
				updateTimerColourValue = value;
				updateTimerColour = true;
				updateTimerColourObservable.next(value);
			}
		}
		
		private Observable<String> updateTimerColourObservable = new Observable<String>();
		
		public Observable<String> getUpdateTimerColour() {
			return updateTimerColourObservable;
		}
		
		private boolean updateTimerValue;
		
		private long updateTimerValueValue;
		
		
		protected void raiseUpdateTimerValue(long value) {
			synchronized(parent) {
				updateTimerValueValue = value;
				updateTimerValue = true;
				updateTimerValueObservable.next(value);
			}
		}
		
		private Observable<Long> updateTimerValueObservable = new Observable<Long>();
		
		public Observable<Long> getUpdateTimerValue() {
			return updateTimerValueObservable;
		}
		
		public static final long oFF = -1;
		
		public synchronized long getOFF() {
			synchronized(parent) {
				return oFF;
			}
		}
		
	}
	
	public static class SmokeSensor {
		private MainCtrl parent;
		
		public SmokeSensor(MainCtrl parent) {
			this.parent = parent;
		}
		private boolean updateSmokeThreshold;
		
		
		protected void raiseUpdateSmokeThreshold() {
			synchronized(parent) {
				updateSmokeThreshold = true;
				updateSmokeThresholdObservable.next(null);
			}
		}
		
		private Observable<Void> updateSmokeThresholdObservable = new Observable<Void>();
		
		public Observable<Void> getUpdateSmokeThreshold() {
			return updateSmokeThresholdObservable;
		}
		
		private boolean updateCarbonThreshold;
		
		
		protected void raiseUpdateCarbonThreshold() {
			synchronized(parent) {
				updateCarbonThreshold = true;
				updateCarbonThresholdObservable.next(null);
			}
		}
		
		private Observable<Void> updateCarbonThresholdObservable = new Observable<Void>();
		
		public Observable<Void> getUpdateCarbonThreshold() {
			return updateCarbonThresholdObservable;
		}
		
	}
	
	protected MessageHandler messageHandler;
	
	protected AlarmLight alarmLight;
	
	protected Timer timer;
	
	protected SmokeSensor smokeSensor;
	
	public enum State {
		MAIN_MAIN,
		MAIN_MAIN_ALARMLIGHT_FINAL_WARNING,
		MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK,
		MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW,
		MAIN_MAIN_ALARMLIGHT_NORMAL,
		MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED,
		MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN,
		MAIN_MAIN_ALARMLIGHT_WARNING,
		MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW,
		MAIN_MAIN_SENSORS_SENSORSONSTANDBY,
		MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY,
		MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY,
		MAIN_MAIN_SENSORS_FIREALARMSOUND,
		MAIN_MAIN_SENSORS_RESETSENSORS,
		MAIN_MAIN_TIMER_DISABLED,
		MAIN_MAIN_TIMER_RUNNING,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW,
		MAIN_OFF,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[9];
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private BlockingQueue<Runnable> internalEventQueue = new LinkedBlockingQueue<Runnable>();
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean resetTimer;
	private boolean disableTimer;
	private boolean enableTimer;
	private long counter;
	
	protected long getCounter() {
		synchronized(MainCtrl.this) {
			return counter;
		}
	}
	
	protected void setCounter(long value) {
		synchronized(MainCtrl.this) {
			this.counter = value;
		}
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(MainCtrl.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(MainCtrl.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(MainCtrl.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(MainCtrl.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public MainCtrl() {
		messageHandler = new MessageHandler(this);
		alarmLight = new AlarmLight(this);
		timer = new Timer(this);
		smokeSensor = new SmokeSensor(this);
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 9; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		setRedPeriod(60);
		
		setGreenPeriod(60);
		
		setYellowPeriod(20);
		
		setCounter(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turnOff = false;
		toggle = false;
		fix = false;
		soundAlarm = false;
		findIssue = false;
		thresholdReached = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void clearInternalEvents() {
		resetTimer = false;
		disableTimer = false;
		enableTimer = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			transitioned = main_main_alarmlight_final_warning_blinking_Black_react(transitioned);
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			transitioned = main_main_alarmlight_final_warning_blinking_Yellow_react(transitioned);
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			transitioned = main_main_alarmlight_normal_normal_Red_react(transitioned);
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			transitioned = main_main_alarmlight_normal_normal_Green_react(transitioned);
			break;
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			transitioned = main_main_alarmlight_warning_turnYellow_Yellow_react(transitioned);
			break;
		case MAIN_OFF:
			transitioned = main_off_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
				transitioned = main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby_react(transitioned);
				break;
			case MAIN_MAIN_SENSORS_FIREALARMSOUND:
				transitioned = main_main_sensors_fireAlarmSound_react(transitioned);
				break;
			case MAIN_MAIN_SENSORS_RESETSENSORS:
				transitioned = main_main_sensors_resetSensors_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2) {
			switch (stateVector[2]) {
			case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
				transitioned = main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3) {
			switch (stateVector[3]) {
			case MAIN_MAIN_TIMER_DISABLED:
				transitioned = main_main_timer_disabled_react(transitioned);
				break;
			case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
				transitioned = main_main_timer_running_running_Green_react(transitioned);
				break;
			case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
				transitioned = main_main_timer_running_running_Yellow_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			clearInternalEvents();
			
			nextEvent();
		} while ((((((((((((((((turnOff || toggle) || fix) || soundAlarm) || findIssue) || thresholdReached) || resetTimer) || disableTimer) || enableTimer) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MAIN:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW.ordinal();
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_ALARMLIGHT_FINAL_WARNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW.ordinal();
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			return stateVector[0] == State.MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW;
		case MAIN_MAIN_ALARMLIGHT_NORMAL:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_ALARMLIGHT_NORMAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN.ordinal();
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			return stateVector[0] == State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			return stateVector[0] == State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN;
		case MAIN_MAIN_ALARMLIGHT_WARNING:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_ALARMLIGHT_WARNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW.ordinal();
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW;
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY:
			return stateVector[1].ordinal() >= State.
					MAIN_MAIN_SENSORS_SENSORSONSTANDBY.ordinal()&& stateVector[1].ordinal() <= State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY.ordinal();
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			return stateVector[1] == State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY;
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
			return stateVector[2] == State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY;
		case MAIN_MAIN_SENSORS_FIREALARMSOUND:
			return stateVector[1] == State.MAIN_MAIN_SENSORS_FIREALARMSOUND;
		case MAIN_MAIN_SENSORS_RESETSENSORS:
			return stateVector[1] == State.MAIN_MAIN_SENSORS_RESETSENSORS;
		case MAIN_MAIN_TIMER_DISABLED:
			return stateVector[3] == State.MAIN_MAIN_TIMER_DISABLED;
		case MAIN_MAIN_TIMER_RUNNING:
			return stateVector[3].ordinal() >= State.
					MAIN_MAIN_TIMER_RUNNING.ordinal()&& stateVector[3].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW.ordinal();
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			return stateVector[3] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			return stateVector[3] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW;
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public MessageHandler messageHandler() {
		return messageHandler;
	}
	
	public AlarmLight alarmLight() {
		return alarmLight;
	}
	
	public Timer timer() {
		return timer;
	}
	
	public SmokeSensor smokeSensor() {
		return smokeSensor;
	}
	
	
	protected void raiseResetTimer() {
		internalEventQueue.add(() -> {
			resetTimer = true;
		});
	}
	
	public void raiseDisableTimer() {
		internalEventQueue.add(() -> {
			disableTimer = true;
		});
	}
	
	protected void raiseEnableTimer() {
		internalEventQueue.add(() -> {
			enableTimer = true;
		});
	}
	
	private boolean turnOff;
	
	
	public void raiseTurnOff() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				turnOff = true;
			});
			runCycle();
		}
	}
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private boolean fix;
	
	
	public void raiseFix() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				fix = true;
			});
			runCycle();
		}
	}
	
	private boolean soundAlarm;
	
	
	public void raiseSoundAlarm() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				soundAlarm = true;
			});
			runCycle();
		}
	}
	
	private boolean findIssue;
	
	
	public void raiseFindIssue() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				findIssue = true;
			});
			runCycle();
		}
	}
	
	private boolean thresholdReached;
	
	
	public void raiseThresholdReached() {
		synchronized(MainCtrl.this) {
			inEventQueue.add(() -> {
				thresholdReached = true;
			});
			runCycle();
		}
	}
	
	private long redPeriod;
	
	public synchronized long getRedPeriod() {
		synchronized(MainCtrl.this) {
			return redPeriod;
		}
	}
	
	public void setRedPeriod(long value) {
		synchronized(MainCtrl.this) {
			this.redPeriod = value;
		}
	}
	
	private long greenPeriod;
	
	public synchronized long getGreenPeriod() {
		synchronized(MainCtrl.this) {
			return greenPeriod;
		}
	}
	
	public void setGreenPeriod(long value) {
		synchronized(MainCtrl.this) {
			this.greenPeriod = value;
		}
	}
	
	private long yellowPeriod;
	
	public synchronized long getYellowPeriod() {
		synchronized(MainCtrl.this) {
			return yellowPeriod;
		}
	}
	
	public void setYellowPeriod(long value) {
		synchronized(MainCtrl.this) {
			this.yellowPeriod = value;
		}
	}
	
	private boolean check_main_main_timer_running_running__choice_0_tr0_tr0() {
		return isStateActive(State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN);
	}
	
	private void effect_main_main_timer_running_running__choice_0_tr0() {
		timer.raiseUpdateTimerColour("Green");
		
		enterSequence_main_main_timer_running_running_Green_default();
	}
	
	private void effect_main_main_timer_running_running__choice_0_tr1() {
		timer.raiseUpdateTimerColour("Red");
		
		enterSequence_main_main_timer_running_running_Yellow_default();
	}
	
	/* Entry action for state 'final_warning'. */
	private void entryAction_main_main_alarmlight_final_warning() {
		timerService.setTimer(this, 0, (getYellowPeriod() * 1000), false);
	}
	
	/* Entry action for state 'Black'. */
	private void entryAction_main_main_alarmlight_final_warning_blinking_Black() {
		timerService.setTimer(this, 1, 500, false);
		
		alarmLight.raiseDisplayNone();
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_alarmlight_final_warning_blinking_Yellow() {
		timerService.setTimer(this, 2, 500, false);
		
		alarmLight.raiseDisplayYellow();
		
		raiseResetTimer();
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_main_alarmlight_normal_normal_Red() {
		alarmLight.raiseDisplayRed();
		
		setCounter(redPeriod);
		
		raiseDisableTimer();
		
		messageHandler.raiseMessage("STATUS: DANGER!");
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_alarmlight_normal_normal_Green() {
		timerService.setTimer(this, 3, (getGreenPeriod() * 1000), false);
		
		alarmLight.raiseDisplayGreen();
		
		setCounter(greenPeriod);
		
		raiseResetTimer();
		
		messageHandler.raiseMessage("STATUS: SAFE!");
	}
	
	/* Entry action for state 'warning'. */
	private void entryAction_main_main_alarmlight_warning() {
		timerService.setTimer(this, 4, ((getYellowPeriod() / 2) * 1000), false);
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_alarmlight_warning_turnYellow_Yellow() {
		alarmLight.raiseDisplayYellow();
		
		messageHandler.raiseMessage("STATUS: WARNING!");
	}
	
	/* Entry action for state 'smokeStandby'. */
	private void entryAction_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby() {
		smokeSensor.raiseUpdateSmokeThreshold();
	}
	
	/* Entry action for state 'carbonStandby'. */
	private void entryAction_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby() {
		smokeSensor.raiseUpdateCarbonThreshold();
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_timer_running_running_Green() {
		timerService.setTimer(this, 5, (1 * 1000), false);
		
		timer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_timer_running_running_Yellow() {
		timerService.setTimer(this, 6, (1 * 1000), false);
		
		timer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Exit action for state 'main'. */
	private void exitAction_main_main() {
		alarmLight.raiseDisplayNone();
	}
	
	/* Exit action for state 'final_warning'. */
	private void exitAction_main_main_alarmlight_final_warning() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Black'. */
	private void exitAction_main_main_alarmlight_final_warning_blinking_Black() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_alarmlight_final_warning_blinking_Yellow() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_alarmlight_normal_normal_Green() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'warning'. */
	private void exitAction_main_main_alarmlight_warning() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'running'. */
	private void exitAction_main_main_timer_running() {
		timer.raiseUpdateTimerValue(timer.getOFF());
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_timer_running_running_Green() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_timer_running_running_Yellow() {
		timerService.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_main_default() {
		enterSequence_main_main_alarmlight_default();
		enterSequence_main_main_sensors_default();
		enterSequence_main_main_timer_default();
	}
	
	/* 'default' enter sequence for state final_warning */
	private void enterSequence_main_main_alarmlight_final_warning_default() {
		entryAction_main_main_alarmlight_final_warning();
		enterSequence_main_main_alarmlight_final_warning_blinking_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Black */
	private void enterSequence_main_main_alarmlight_final_warning_blinking_Black_default() {
		entryAction_main_main_alarmlight_final_warning_blinking_Black();
		stateVector[0] = State.MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK;
		stateConfVectorPosition = 0;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_alarmlight_final_warning_blinking_Yellow_default() {
		entryAction_main_main_alarmlight_final_warning_blinking_Yellow();
		stateVector[0] = State.MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW;
		stateConfVectorPosition = 0;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_main_main_alarmlight_normal_default() {
		enterSequence_main_main_alarmlight_normal_normal_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_main_alarmlight_normal_normal_Red_default() {
		entryAction_main_main_alarmlight_normal_normal_Red();
		stateVector[0] = State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED;
		stateConfVectorPosition = 0;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_alarmlight_normal_normal_Green_default() {
		entryAction_main_main_alarmlight_normal_normal_Green();
		stateVector[0] = State.MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN;
		stateConfVectorPosition = 0;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state warning */
	private void enterSequence_main_main_alarmlight_warning_default() {
		entryAction_main_main_alarmlight_warning();
		enterSequence_main_main_alarmlight_warning_turnYellow_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_alarmlight_warning_turnYellow_Yellow_default() {
		entryAction_main_main_alarmlight_warning_turnYellow_Yellow();
		stateVector[0] = State.MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW;
		stateConfVectorPosition = 0;
		
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state smokeStandby */
	private void enterSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby_default() {
		entryAction_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby();
		stateVector[1] = State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY;
		stateConfVectorPosition = 1;
		
		historyVector[5] = stateVector[1];
	}
	
	/* 'default' enter sequence for state carbonStandby */
	private void enterSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby_default() {
		entryAction_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby();
		stateVector[2] = State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY;
		stateConfVectorPosition = 2;
		
		historyVector[6] = stateVector[2];
	}
	
	/* 'default' enter sequence for state fireAlarmSound */
	private void enterSequence_main_main_sensors_fireAlarmSound_default() {
		stateVector[1] = State.MAIN_MAIN_SENSORS_FIREALARMSOUND;
		stateConfVectorPosition = 1;
		
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state resetSensors */
	private void enterSequence_main_main_sensors_resetSensors_default() {
		stateVector[1] = State.MAIN_MAIN_SENSORS_RESETSENSORS;
		stateConfVectorPosition = 1;
		
		historyVector[4] = stateVector[1];
	}
	
	/* 'default' enter sequence for state disabled */
	private void enterSequence_main_main_timer_disabled_default() {
		stateVector[3] = State.MAIN_MAIN_TIMER_DISABLED;
		stateConfVectorPosition = 3;
		
		historyVector[7] = stateVector[3];
	}
	
	/* 'default' enter sequence for state running */
	private void enterSequence_main_main_timer_running_default() {
		enterSequence_main_main_timer_running_running_default();
		historyVector[7] = stateVector[3];
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_timer_running_running_Green_default() {
		entryAction_main_main_timer_running_running_Green();
		stateVector[3] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
		stateConfVectorPosition = 3;
		
		historyVector[8] = stateVector[3];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_timer_running_running_Yellow_default() {
		entryAction_main_main_timer_running_running_Yellow();
		stateVector[3] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW;
		stateConfVectorPosition = 3;
		
		historyVector[8] = stateVector[3];
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_off_default() {
		stateVector[0] = State.MAIN_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region alarmlight */
	private void enterSequence_main_main_alarmlight_default() {
		react_main_main_alarmlight__entry_Default();
	}
	
	/* deep enterSequence with history in child alarmlight */
	private void deepEnterSequence_main_main_alarmlight() {
		switch (historyVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			entryAction_main_main_alarmlight_final_warning();
			deepEnterSequence_main_main_alarmlight_final_warning_blinking();
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			entryAction_main_main_alarmlight_final_warning();
			deepEnterSequence_main_main_alarmlight_final_warning_blinking();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			deepEnterSequence_main_main_alarmlight_normal_normal();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			deepEnterSequence_main_main_alarmlight_normal_normal();
			break;
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			entryAction_main_main_alarmlight_warning();
			deepEnterSequence_main_main_alarmlight_warning_turnYellow();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region blinking */
	private void enterSequence_main_main_alarmlight_final_warning_blinking_default() {
		react_main_main_alarmlight_final_warning_blinking__entry_Default();
	}
	
	/* deep enterSequence with history in child blinking */
	private void deepEnterSequence_main_main_alarmlight_final_warning_blinking() {
		switch (historyVector[1]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			enterSequence_main_main_alarmlight_final_warning_blinking_Black_default();
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			enterSequence_main_main_alarmlight_final_warning_blinking_Yellow_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region normal */
	private void enterSequence_main_main_alarmlight_normal_normal_default() {
		react_main_main_alarmlight_normal_normal__entry_Default();
	}
	
	/* deep enterSequence with history in child normal */
	private void deepEnterSequence_main_main_alarmlight_normal_normal() {
		switch (historyVector[2]) {
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			enterSequence_main_main_alarmlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			enterSequence_main_main_alarmlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* shallow enterSequence with history in child normal */
	private void shallowEnterSequence_main_main_alarmlight_normal_normal() {
		switch (historyVector[2]) {
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			enterSequence_main_main_alarmlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			enterSequence_main_main_alarmlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region turnYellow */
	private void enterSequence_main_main_alarmlight_warning_turnYellow_default() {
		react_main_main_alarmlight_warning_turnYellow__entry_Default();
	}
	
	/* deep enterSequence with history in child turnYellow */
	private void deepEnterSequence_main_main_alarmlight_warning_turnYellow() {
		switch (historyVector[3]) {
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			enterSequence_main_main_alarmlight_warning_turnYellow_Yellow_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region sensors */
	private void enterSequence_main_main_sensors_default() {
		react_main_main_sensors__entry_Default();
	}
	
	/* deep enterSequence with history in child sensors */
	private void deepEnterSequence_main_main_sensors() {
		switch (historyVector[4]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			deepEnterSequence_main_main_sensors_sensorsOnStandby_smokeSensor();
			deepEnterSequence_main_main_sensors_sensorsOnStandby_carbonSensor();
			break;
		case MAIN_MAIN_SENSORS_FIREALARMSOUND:
			enterSequence_main_main_sensors_fireAlarmSound_default();
			break;
		case MAIN_MAIN_SENSORS_RESETSENSORS:
			enterSequence_main_main_sensors_resetSensors_default();
			break;
		default:
			break;
		}
	}
	
	/* deep enterSequence with history in child smokeSensor */
	private void deepEnterSequence_main_main_sensors_sensorsOnStandby_smokeSensor() {
		switch (historyVector[5]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			enterSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby_default();
			break;
		default:
			break;
		}
	}
	
	/* deep enterSequence with history in child carbonSensor */
	private void deepEnterSequence_main_main_sensors_sensorsOnStandby_carbonSensor() {
		switch (historyVector[6]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
			enterSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region timer */
	private void enterSequence_main_main_timer_default() {
		react_main_main_timer__entry_Default();
	}
	
	/* deep enterSequence with history in child timer */
	private void deepEnterSequence_main_main_timer() {
		switch (historyVector[7]) {
		case MAIN_MAIN_TIMER_DISABLED:
			enterSequence_main_main_timer_disabled_default();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			deepEnterSequence_main_main_timer_running_running();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			deepEnterSequence_main_main_timer_running_running();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region running */
	private void enterSequence_main_main_timer_running_running_default() {
		react_main_main_timer_running_running__entry_Default();
	}
	
	/* deep enterSequence with history in child running */
	private void deepEnterSequence_main_main_timer_running_running() {
		switch (historyVector[8]) {
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			enterSequence_main_main_timer_running_running_Green_default();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			enterSequence_main_main_timer_running_running_Yellow_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_main() {
		exitSequence_main_main_alarmlight();
		exitSequence_main_main_sensors();
		exitSequence_main_main_timer();
		exitAction_main_main();
	}
	
	/* Default exit sequence for state final_warning */
	private void exitSequence_main_main_alarmlight_final_warning() {
		exitSequence_main_main_alarmlight_final_warning_blinking();
		exitAction_main_main_alarmlight_final_warning();
	}
	
	/* Default exit sequence for state Black */
	private void exitSequence_main_main_alarmlight_final_warning_blinking_Black() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_main_alarmlight_final_warning_blinking_Black();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_alarmlight_final_warning_blinking_Yellow() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_main_alarmlight_final_warning_blinking_Yellow();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_main_main_alarmlight_normal() {
		exitSequence_main_main_alarmlight_normal_normal();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_main_alarmlight_normal_normal_Red() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_alarmlight_normal_normal_Green() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_main_alarmlight_normal_normal_Green();
	}
	
	/* Default exit sequence for state warning */
	private void exitSequence_main_main_alarmlight_warning() {
		exitSequence_main_main_alarmlight_warning_turnYellow();
		exitAction_main_main_alarmlight_warning();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_alarmlight_warning_turnYellow_Yellow() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state sensorsOnStandby */
	private void exitSequence_main_main_sensors_sensorsOnStandby() {
		exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor();
		exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor();
	}
	
	/* Default exit sequence for state smokeStandby */
	private void exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state carbonStandby */
	private void exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state fireAlarmSound */
	private void exitSequence_main_main_sensors_fireAlarmSound() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state resetSensors */
	private void exitSequence_main_main_sensors_resetSensors() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state disabled */
	private void exitSequence_main_main_timer_disabled() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state running */
	private void exitSequence_main_main_timer_running() {
		exitSequence_main_main_timer_running_running();
		exitAction_main_main_timer_running();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_timer_running_running_Green() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_main_timer_running_running_Green();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_timer_running_running_Yellow() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_main_timer_running_running_Yellow();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			exitSequence_main_main_alarmlight_final_warning_blinking_Black();
			exitAction_main_main_alarmlight_final_warning();
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			exitSequence_main_main_alarmlight_final_warning_blinking_Yellow();
			exitAction_main_main_alarmlight_final_warning();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_alarmlight_normal_normal_Red();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_alarmlight_normal_normal_Green();
			break;
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			exitSequence_main_main_alarmlight_warning_turnYellow_Yellow();
			exitAction_main_main_alarmlight_warning();
			break;
		case MAIN_OFF:
			exitSequence_main_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby();
			break;
		case MAIN_MAIN_SENSORS_FIREALARMSOUND:
			exitSequence_main_main_sensors_fireAlarmSound();
			break;
		case MAIN_MAIN_SENSORS_RESETSENSORS:
			exitSequence_main_main_sensors_resetSensors();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			exitSequence_main_main_timer_running_running_Yellow();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region alarmlight */
	private void exitSequence_main_main_alarmlight() {
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			exitSequence_main_main_alarmlight_final_warning_blinking_Black();
			exitAction_main_main_alarmlight_final_warning();
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			exitSequence_main_main_alarmlight_final_warning_blinking_Yellow();
			exitAction_main_main_alarmlight_final_warning();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_alarmlight_normal_normal_Red();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_alarmlight_normal_normal_Green();
			break;
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			exitSequence_main_main_alarmlight_warning_turnYellow_Yellow();
			exitAction_main_main_alarmlight_warning();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region blinking */
	private void exitSequence_main_main_alarmlight_final_warning_blinking() {
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_BLACK:
			exitSequence_main_main_alarmlight_final_warning_blinking_Black();
			break;
		case MAIN_MAIN_ALARMLIGHT_FINAL_WARNING_BLINKING_YELLOW:
			exitSequence_main_main_alarmlight_final_warning_blinking_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region normal */
	private void exitSequence_main_main_alarmlight_normal_normal() {
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_alarmlight_normal_normal_Red();
			break;
		case MAIN_MAIN_ALARMLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_alarmlight_normal_normal_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region turnYellow */
	private void exitSequence_main_main_alarmlight_warning_turnYellow() {
		switch (stateVector[0]) {
		case MAIN_MAIN_ALARMLIGHT_WARNING_TURNYELLOW_YELLOW:
			exitSequence_main_main_alarmlight_warning_turnYellow_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region sensors */
	private void exitSequence_main_main_sensors() {
		switch (stateVector[1]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby();
			break;
		case MAIN_MAIN_SENSORS_FIREALARMSOUND:
			exitSequence_main_main_sensors_fireAlarmSound();
			break;
		case MAIN_MAIN_SENSORS_RESETSENSORS:
			exitSequence_main_main_sensors_resetSensors();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smokeSensor */
	private void exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor() {
		switch (stateVector[1]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region carbonSensor */
	private void exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor() {
		switch (stateVector[2]) {
		case MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY:
			exitSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region timer */
	private void exitSequence_main_main_timer() {
		switch (stateVector[3]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			exitSequence_main_main_timer_running_running_Yellow();
			exitAction_main_main_timer_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running */
	private void exitSequence_main_main_timer_running_running() {
		switch (stateVector[3]) {
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_YELLOW:
			exitSequence_main_main_timer_running_running_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_main_timer_running_running__choice_0() {
		if (check_main_main_timer_running_running__choice_0_tr0_tr0()) {
			effect_main_main_timer_running_running__choice_0_tr0();
		} else {
			effect_main_main_timer_running_running__choice_0_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_alarmlight_final_warning_blinking__entry_Default() {
		enterSequence_main_main_alarmlight_final_warning_blinking_Yellow_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_alarmlight_normal_normal__entry_Default() {
		enterSequence_main_main_alarmlight_normal_normal_Green_default();
	}
	
	/* Default react sequence for shallow history entry hist */
	private void react_main_main_alarmlight_normal_normal_hist() {
		/* Enter the region with shallow history */
		if (historyVector[2] != State.$NULLSTATE$) {
			shallowEnterSequence_main_main_alarmlight_normal_normal();
		} else {
			enterSequence_main_main_alarmlight_normal_normal_Green_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_alarmlight__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_alarmlight();
		} else {
			enterSequence_main_main_alarmlight_normal_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_alarmlight_warning_turnYellow__entry_Default() {
		enterSequence_main_main_alarmlight_warning_turnYellow_Yellow_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_sensors__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[4] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_sensors();
		} else {
			react_main_main_sensors__sync0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_timer_running_running__entry_Default() {
		react_main_main_timer_running_running__choice_0();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_timer__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[7] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_timer();
		} else {
			enterSequence_main_main_timer_running_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_off_default();
	}
	
	/* The reactions of state null. */
	private void react_main_main_sensors__sync0() {
		enterSequence_main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby_default();
		enterSequence_main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby_default();
		historyVector[4] = stateVector[1];
	}
	
	/* The reactions of state null. */
	private void react_main_main_sensors__sync1() {
		enterSequence_main_main_sensors_fireAlarmSound_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_main_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (toggle) {
				exitSequence_main_main();
				enterSequence_main_off_default();
				react(0);
				
				transitioned_after = 3;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_final_warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOff) {
				exitSequence_main_main_alarmlight_final_warning();
				raiseEnableTimer();
				
				messageHandler.raiseMessage("STATUS: CRITICAL!");
				
				react_main_main_alarmlight_normal_normal_hist();
				historyVector[0] = stateVector[0];
				
				transitioned_after = 0;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_main_alarmlight_final_warning();
					alarmLight.raiseDisplayRed();
					
					setCounter(redPeriod);
					
					raiseResetTimer();
					
					messageHandler.raiseMessage("\nSYSTEM WILL NOW BE SOUNDING THE ALARM");
					
					timeEvents[0] = false;
					enterSequence_main_main_alarmlight_normal_normal_Red_default();
					historyVector[0] = stateVector[0];
					
					transitioned_after = 0;
				} else {
					if (fix) {
						exitSequence_main_main_alarmlight_final_warning();
						raiseResetTimer();
						
						messageHandler.raiseMessage("FIXED");
						
						enterSequence_main_main_alarmlight_normal_normal_Green_default();
						historyVector[0] = stateVector[0];
						
						transitioned_after = 0;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_final_warning_blinking_Black_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_main_main_alarmlight_final_warning_blinking_Black();
				timeEvents[1] = false;
				enterSequence_main_main_alarmlight_final_warning_blinking_Yellow_default();
				main_main_alarmlight_final_warning_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_alarmlight_final_warning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_final_warning_blinking_Yellow_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_main_main_alarmlight_final_warning_blinking_Yellow();
				timeEvents[2] = false;
				enterSequence_main_main_alarmlight_final_warning_blinking_Black_default();
				main_main_alarmlight_final_warning_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_alarmlight_final_warning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_normal_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_normal_normal_Red_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOff) {
				exitSequence_main_main_alarmlight_normal_normal_Red();
				raiseEnableTimer();
				
				messageHandler.raiseMessage("FIXED");
				
				enterSequence_main_main_alarmlight_normal_normal_Green_default();
				main_main_alarmlight_normal_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_alarmlight_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_normal_normal_Green_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_main_main_alarmlight_normal();
				raiseEnableTimer();
				
				setCounter(yellowPeriod);
				
				timeEvents[3] = false;
				enterSequence_main_main_alarmlight_warning_default();
				transitioned_after = 0;
			} else {
				if (soundAlarm) {
					exitSequence_main_main_alarmlight_normal_normal_Green();
					raiseDisableTimer();
					
					enterSequence_main_main_alarmlight_normal_normal_Red_default();
					main_main_alarmlight_normal_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_alarmlight_normal_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[4]) {
				exitSequence_main_main_alarmlight_warning();
				timeEvents[4] = false;
				enterSequence_main_main_alarmlight_final_warning_default();
				transitioned_after = 0;
			} else {
				if (fix) {
					exitSequence_main_main_alarmlight_warning();
					raiseResetTimer();
					
					messageHandler.raiseMessage("FIXED");
					
					enterSequence_main_main_alarmlight_normal_normal_Green_default();
					historyVector[0] = stateVector[0];
					
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_alarmlight_warning_turnYellow_Yellow_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_alarmlight_warning_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_sensors_sensorsOnStandby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		return transitioned_after;
	}
	
	private long main_main_sensors_sensorsOnStandby_smokeSensor_smokeStandby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (((thresholdReached && isStateActive(State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_CARBONSENSOR_CARBONSTANDBY)) && thresholdReached)) {
				exitSequence_main_main_sensors_sensorsOnStandby();
				react_main_main_sensors__sync1();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_sensors_sensorsOnStandby_carbonSensor_carbonStandby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2) {
			if (((thresholdReached && isStateActive(State.MAIN_MAIN_SENSORS_SENSORSONSTANDBY_SMOKESENSOR_SMOKESTANDBY)) && thresholdReached)) {
				exitSequence_main_main_sensors_sensorsOnStandby();
				react_main_main_sensors__sync1();
				transitioned_after = 2;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_sensors_sensorsOnStandby_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_sensors_fireAlarmSound_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (fix) {
				exitSequence_main_main_sensors_fireAlarmSound();
				enterSequence_main_main_sensors_resetSensors_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_sensors_resetSensors_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		return transitioned_after;
	}
	
	private long main_main_timer_disabled_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (enableTimer) {
				exitSequence_main_main_timer_disabled();
				enterSequence_main_main_timer_running_default();
				main_main_react(0);
				
				transitioned_after = 3;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (disableTimer) {
				exitSequence_main_main_timer_running();
				enterSequence_main_main_timer_disabled_default();
				main_main_react(0);
				
				transitioned_after = 3;
			} else {
				if (resetTimer) {
					exitSequence_main_main_timer_running();
					enterSequence_main_main_timer_running_default();
					main_main_react(0);
					
					transitioned_after = 3;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_running_Green_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (timeEvents[5]) {
				exitSequence_main_main_timer_running_running_Green();
				setCounter(getCounter() - 1);
				
				timeEvents[5] = false;
				enterSequence_main_main_timer_running_running_Green_default();
				main_main_timer_running_react(3);
				
				transitioned_after = 3;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_timer_running_running_Yellow_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
			if (timeEvents[6]) {
				exitSequence_main_main_timer_running_running_Yellow();
				setCounter(getCounter() - 1);
				
				timeEvents[6] = false;
				enterSequence_main_main_timer_running_running_Yellow_default();
				main_main_timer_running_react(3);
				
				transitioned_after = 3;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_timer_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (toggle) {
				exitSequence_main_off();
				enterSequence_main_main_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
