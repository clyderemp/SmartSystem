/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class SmartTVSystem implements IStatemachine, ITimed {
	public static class Message {
		private SmartTVSystem parent;
		
		public Message(SmartTVSystem parent) {
			this.parent = parent;
		}
		private String status;
		
		public synchronized String getStatus() {
			synchronized(parent) {
				return status;
			}
		}
		
		public void setStatus(String value) {
			synchronized(parent) {
				this.status = value;
			}
		}
		
	}
	
	public static class Wifi {
		private SmartTVSystem parent;
		
		public Wifi(SmartTVSystem parent) {
			this.parent = parent;
		}
		private boolean error;
		
		
		protected void raiseError() {
			synchronized(parent) {
				error = true;
				errorObservable.next(null);
			}
		}
		
		private Observable<Void> errorObservable = new Observable<Void>();
		
		public Observable<Void> getError() {
			return errorObservable;
		}
		
		private boolean connection;
		
		public synchronized boolean getConnection() {
			synchronized(parent) {
				return connection;
			}
		}
		
		public void setConnection(boolean value) {
			synchronized(parent) {
				this.connection = value;
			}
		}
		
	}
	
	public static class Heat {
		private SmartTVSystem parent;
		
		public Heat(SmartTVSystem parent) {
			this.parent = parent;
		}
		private boolean continueEvent;
		
		
		public void raiseContinue() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					continueEvent = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean rest;
		
		
		public void raiseRest() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					rest = true;
				});
				parent.runCycle();
			}
		}
		
		private long level;
		
		public synchronized long getLevel() {
			synchronized(parent) {
				return level;
			}
		}
		
		public void setLevel(long value) {
			synchronized(parent) {
				this.level = value;
			}
		}
		
		private boolean user_warned;
		
		public synchronized boolean getUser_warned() {
			synchronized(parent) {
				return user_warned;
			}
		}
		
		public void setUser_warned(boolean value) {
			synchronized(parent) {
				this.user_warned = value;
			}
		}
		
	}
	
	public static class Power {
		private SmartTVSystem parent;
		
		public Power(SmartTVSystem parent) {
			this.parent = parent;
		}
		private long kilowatt;
		
		public synchronized long getKilowatt() {
			synchronized(parent) {
				return kilowatt;
			}
		}
		
		public void setKilowatt(long value) {
			synchronized(parent) {
				this.kilowatt = value;
			}
		}
		
		private long totalTime;
		
		public synchronized long getTotalTime() {
			synchronized(parent) {
				return totalTime;
			}
		}
		
		public void setTotalTime(long value) {
			synchronized(parent) {
				this.totalTime = value;
			}
		}
		
		private long electricConsumption;
		
		public synchronized long getElectricConsumption() {
			synchronized(parent) {
				return electricConsumption;
			}
		}
		
		public void setElectricConsumption(long value) {
			synchronized(parent) {
				this.electricConsumption = value;
			}
		}
		
	}
	
	protected Message message;
	
	protected Wifi wifi;
	
	protected Heat heat;
	
	protected Power power;
	
	public enum State {
		MAIN_SMARTTVSYSTEM,
		MAIN_SMARTTVSYSTEM_TVSTATUS_OFF,
		MAIN_SMARTTVSYSTEM_TVSTATUS_ON,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING,
		MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY,
		MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT,
		MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF,
		MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(SmartTVSystem.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(SmartTVSystem.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(SmartTVSystem.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(SmartTVSystem.this) {
			this.stateConfVectorPosition = value;
		}
	}
	private boolean stateConfVectorChanged;
	
	protected boolean getStateConfVectorChanged() {
		synchronized(SmartTVSystem.this) {
			return stateConfVectorChanged;
		}
	}
	
	protected void setStateConfVectorChanged(boolean value) {
		synchronized(SmartTVSystem.this) {
			this.stateConfVectorChanged = value;
		}
	}
	public SmartTVSystem() {
		message = new Message(this);
		wifi = new Wifi(this);
		heat = new Heat(this);
		power = new Power(this);
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setFully_rested(false);
		
		setThreshold(50l);
		
		setCrash_value(80l);
		
		message.setStatus("");
		
		wifi.setConnection(false);
		
		heat.setLevel(0l);
		
		heat.setUser_warned(false);
		
		power.setKilowatt(1l);
		
		power.setTotalTime(0l);
		
		power.setElectricConsumption(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_default();
		do { 
			stateConfVectorChanged = false;
			
			microStep();
		} while (getStateConfVectorChanged());
		
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turn_on = false;
		turn_off = false;
		heating_up = false;
		warning = false;
		heat.continueEvent = false;
		heat.rest = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_SMARTTVSYSTEM_TVSTATUS_OFF:
			transitioned = main_SmartTVSystem_tvStatus_Off_react(transitioned);
			break;
		case MAIN_SMARTTVSYSTEM_TVSTATUS_ON:
			transitioned = main_SmartTVSystem_tvStatus_On_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE:
				transitioned = main_SmartTVSystem_heatLevel_restState_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP:
				transitioned = main_SmartTVSystem_heatLevel_heatingUp_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT:
				transitioned = main_SmartTVSystem_heatLevel_overheat_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING:
				transitioned = main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
				transitioned = main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
				transitioned = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
				transitioned = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
				transitioned = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT:
				transitioned = main_SmartTVSystem_connectionStatus_networkTimeout_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF:
				main_SmartTVSystem_powerConsumption_off_react(transitioned);
				break;
			case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER:
				main_SmartTVSystem_powerConsumption_consuming_power_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			do { 
				stateConfVectorChanged = false;
				
				microStep();
			} while (getStateConfVectorChanged());
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((((((turn_on || turn_off) || heating_up) || warning) || heat.continueEvent) || heat.rest) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_SMARTTVSYSTEM:
			return stateVector[0].ordinal() >= State.
					MAIN_SMARTTVSYSTEM.ordinal()&& stateVector[0].ordinal() <= State.MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER.ordinal();
		case MAIN_SMARTTVSYSTEM_TVSTATUS_OFF:
			return stateVector[0] == State.MAIN_SMARTTVSYSTEM_TVSTATUS_OFF;
		case MAIN_SMARTTVSYSTEM_TVSTATUS_ON:
			return stateVector[0] == State.MAIN_SMARTTVSYSTEM_TVSTATUS_ON;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE:
			return stateVector[1] == State.MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP:
			return stateVector[1] == State.MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT:
			return stateVector[1] == State.MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE:
			return stateVector[1].ordinal() >= State.
					MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE.ordinal()&& stateVector[1].ordinal() <= State.MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED.ordinal();
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING:
			return stateVector[1] == State.MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			return stateVector[1] == State.MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION:
			return stateVector[2].ordinal() >= State.
					MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION.ordinal()&& stateVector[2].ordinal() <= State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY.ordinal();
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER:
			return stateVector[2].ordinal() >= State.
					MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER.ordinal()&& stateVector[2].ordinal() <= State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL.ordinal();
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			return stateVector[2] == State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			return stateVector[2] == State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
			return stateVector[2] == State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT:
			return stateVector[2] == State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT;
		case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF:
			return stateVector[3] == State.MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF;
		case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER:
			return stateVector[3] == State.MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Message message() {
		return message;
	}
	
	public Wifi wifi() {
		return wifi;
	}
	
	public Heat heat() {
		return heat;
	}
	
	public Power power() {
		return power;
	}
	
	
	private boolean turn_on;
	
	
	public void raiseTurn_on() {
		synchronized(SmartTVSystem.this) {
			inEventQueue.add(() -> {
				turn_on = true;
			});
			runCycle();
		}
	}
	
	private boolean on;
	
	
	protected void raiseOn() {
		synchronized(SmartTVSystem.this) {
			on = true;
			onObservable.next(null);
		}
	}
	
	private Observable<Void> onObservable = new Observable<Void>();
	
	public Observable<Void> getOn() {
		return onObservable;
	}
	
	private boolean turn_off;
	
	
	public void raiseTurn_off() {
		synchronized(SmartTVSystem.this) {
			inEventQueue.add(() -> {
				turn_off = true;
			});
			runCycle();
		}
	}
	
	private boolean off;
	
	
	protected void raiseOff() {
		synchronized(SmartTVSystem.this) {
			off = true;
			offObservable.next(null);
		}
	}
	
	private Observable<Void> offObservable = new Observable<Void>();
	
	public Observable<Void> getOff() {
		return offObservable;
	}
	
	private boolean heating_up;
	
	
	public void raiseHeating_up() {
		synchronized(SmartTVSystem.this) {
			inEventQueue.add(() -> {
				heating_up = true;
			});
			runCycle();
		}
	}
	
	private boolean warning;
	
	
	public void raiseWarning() {
		synchronized(SmartTVSystem.this) {
			inEventQueue.add(() -> {
				warning = true;
			});
			runCycle();
		}
	}
	
	private boolean fully_rested;
	
	public synchronized boolean getFully_rested() {
		synchronized(SmartTVSystem.this) {
			return fully_rested;
		}
	}
	
	public void setFully_rested(boolean value) {
		synchronized(SmartTVSystem.this) {
			this.fully_rested = value;
		}
	}
	
	private long threshold;
	
	public synchronized long getThreshold() {
		synchronized(SmartTVSystem.this) {
			return threshold;
		}
	}
	
	public void setThreshold(long value) {
		synchronized(SmartTVSystem.this) {
			this.threshold = value;
		}
	}
	
	private long crash_value;
	
	public synchronized long getCrash_value() {
		synchronized(SmartTVSystem.this) {
			return crash_value;
		}
	}
	
	public void setCrash_value(long value) {
		synchronized(SmartTVSystem.this) {
			this.crash_value = value;
		}
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_main_SmartTVSystem_tvStatus_On() {
		wifi.setConnection(true);
		
		raiseOn();
		
		message.setStatus("On");
	}
	
	/* Entry action for state 'restState'. */
	private void entryAction_main_SmartTVSystem_heatLevel_restState() {
		heat.setUser_warned(false);
	}
	
	/* Entry action for state 'heatingUp'. */
	private void entryAction_main_SmartTVSystem_heatLevel_heatingUp() {
		timerService.setTimer(this, 0, (12l * 1000l), false);
		
		heat.setLevel(heat.getLevel() + 1l);
		
		setFully_rested(false);
	}
	
	/* Entry action for state 'overheat'. */
	private void entryAction_main_SmartTVSystem_heatLevel_overheat() {
		timerService.setTimer(this, 1, (3l * 1000l), false);
		
		raiseWarning();
	}
	
	/* Entry action for state 'coolingState'. */
	private void entryAction_main_SmartTVSystem_heatLevel_coolingState() {
		timerService.setTimer(this, 2, (12l * 1000l), false);
	}
	
	/* Entry action for state 'fully_rested'. */
	private void entryAction_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested() {
		setFully_rested(true);
	}
	
	/* Entry action for state 'connectToServer'. */
	private void entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer() {
		timerService.setTimer(this, 3, (10l * 1000l), false);
		
		if (turn_on) {
			wifi.setConnection(true);
		}
	}
	
	/* Entry action for state 'fail'. */
	private void entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		timerService.setTimer(this, 4, (5l * 1000l), false);
	}
	
	/* Entry action for state 'networkTimeout'. */
	private void entryAction_main_SmartTVSystem_connectionStatus_networkTimeout() {
		wifi.setConnection(false);
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_SmartTVSystem_powerConsumption_off() {
		power.setTotalTime(0l);
	}
	
	/* Entry action for state 'consuming_power'. */
	private void entryAction_main_SmartTVSystem_powerConsumption_consuming_power() {
		timerService.setTimer(this, 5, (1l * 1000l), false);
		
		power.setElectricConsumption((power.kilowatt * power.totalTime));
	}
	
	/* Exit action for state 'heatingUp'. */
	private void exitAction_main_SmartTVSystem_heatLevel_heatingUp() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'overheat'. */
	private void exitAction_main_SmartTVSystem_heatLevel_overheat() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'coolingState'. */
	private void exitAction_main_SmartTVSystem_heatLevel_coolingState() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'connectToServer'. */
	private void exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'fail'. */
	private void exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'consuming_power'. */
	private void exitAction_main_SmartTVSystem_powerConsumption_consuming_power() {
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state SmartTVSystem */
	private void enterSequence_main_SmartTVSystem_default() {
		enterSequence_main_SmartTVSystem_tvStatus_default();
		enterSequence_main_SmartTVSystem_heatLevel_default();
		enterSequence_main_SmartTVSystem_connectionStatus_default();
		enterSequence_main_SmartTVSystem_powerConsumption_default();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_SmartTVSystem_tvStatus_Off_default() {
		stateVector[0] = State.MAIN_SMARTTVSYSTEM_TVSTATUS_OFF;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_SmartTVSystem_tvStatus_On_default() {
		entryAction_main_SmartTVSystem_tvStatus_On();
		stateVector[0] = State.MAIN_SMARTTVSYSTEM_TVSTATUS_ON;
		stateConfVectorPosition = 0;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state restState */
	private void enterSequence_main_SmartTVSystem_heatLevel_restState_default() {
		entryAction_main_SmartTVSystem_heatLevel_restState();
		stateVector[1] = State.MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state heatingUp */
	private void enterSequence_main_SmartTVSystem_heatLevel_heatingUp_default() {
		entryAction_main_SmartTVSystem_heatLevel_heatingUp();
		stateVector[1] = State.MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state overheat */
	private void enterSequence_main_SmartTVSystem_heatLevel_overheat_default() {
		entryAction_main_SmartTVSystem_heatLevel_overheat();
		stateVector[1] = State.MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state coolingState */
	private void enterSequence_main_SmartTVSystem_heatLevel_coolingState_default() {
		entryAction_main_SmartTVSystem_heatLevel_coolingState();
		enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_default();
	}
	
	/* 'default' enter sequence for state cooling */
	private void enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling_default() {
		stateVector[1] = State.MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state fully_rested */
	private void enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested_default() {
		entryAction_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested();
		stateVector[1] = State.MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED;
		stateConfVectorPosition = 1;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state checkForWiFiConnection */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_default() {
		enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_default();
		historyVector[0] = stateVector[2];
	}
	
	/* 'default' enter sequence for state connectToServer */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_default() {
		entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
		enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_default();
		historyVector[1] = stateVector[2];
	}
	
	/* 'default' enter sequence for state success */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success_default() {
		stateVector[2] = State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
		
		historyVector[2] = stateVector[2];
	}
	
	/* 'default' enter sequence for state fail */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail_default() {
		entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail();
		stateVector[2] = State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
		
		historyVector[2] = stateVector[2];
	}
	
	/* 'default' enter sequence for state standby */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby_default() {
		stateVector[2] = State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
		
		historyVector[1] = stateVector[2];
	}
	
	/* 'default' enter sequence for state networkTimeout */
	private void enterSequence_main_SmartTVSystem_connectionStatus_networkTimeout_default() {
		entryAction_main_SmartTVSystem_connectionStatus_networkTimeout();
		stateVector[2] = State.MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT;
		stateConfVectorPosition = 2;
		stateConfVectorChanged = true;
		
		historyVector[0] = stateVector[2];
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_SmartTVSystem_powerConsumption_off_default() {
		entryAction_main_SmartTVSystem_powerConsumption_off();
		stateVector[3] = State.MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF;
		stateConfVectorPosition = 3;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for state consuming_power */
	private void enterSequence_main_SmartTVSystem_powerConsumption_consuming_power_default() {
		entryAction_main_SmartTVSystem_powerConsumption_consuming_power();
		stateVector[3] = State.MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER;
		stateConfVectorPosition = 3;
		stateConfVectorChanged = true;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region tvStatus */
	private void enterSequence_main_SmartTVSystem_tvStatus_default() {
		react_main_SmartTVSystem_tvStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region heatLevel */
	private void enterSequence_main_SmartTVSystem_heatLevel_default() {
		react_main_SmartTVSystem_heatLevel__entry_Default();
	}
	
	/* 'default' enter sequence for region set_rested */
	private void enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_default() {
		react_main_SmartTVSystem_heatLevel_coolingState_set_rested__entry_Default();
	}
	
	/* 'default' enter sequence for region connectionStatus */
	private void enterSequence_main_SmartTVSystem_connectionStatus_default() {
		react_main_SmartTVSystem_connectionStatus__entry_Default();
	}
	
	/* deep enterSequence with history in child connectionStatus */
	private void deepEnterSequence_main_SmartTVSystem_connectionStatus() {
		switch (historyVector[0]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
			deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT:
			enterSequence_main_SmartTVSystem_connectionStatus_networkTimeout_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_default() {
		react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1() {
		switch (historyVector[1]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			entryAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_default() {
		react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1() {
		switch (historyVector[2]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success_default();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region powerConsumption */
	private void enterSequence_main_SmartTVSystem_powerConsumption_default() {
		react_main_SmartTVSystem_powerConsumption__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_SmartTVSystem_tvStatus_Off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_SmartTVSystem_tvStatus_On() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state restState */
	private void exitSequence_main_SmartTVSystem_heatLevel_restState() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state heatingUp */
	private void exitSequence_main_SmartTVSystem_heatLevel_heatingUp() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_SmartTVSystem_heatLevel_heatingUp();
	}
	
	/* Default exit sequence for state overheat */
	private void exitSequence_main_SmartTVSystem_heatLevel_overheat() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_SmartTVSystem_heatLevel_overheat();
	}
	
	/* Default exit sequence for state coolingState */
	private void exitSequence_main_SmartTVSystem_heatLevel_coolingState() {
		exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested();
		exitAction_main_SmartTVSystem_heatLevel_coolingState();
	}
	
	/* Default exit sequence for state cooling */
	private void exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state fully_rested */
	private void exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state checkForWiFiConnection */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection() {
		exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1();
	}
	
	/* Default exit sequence for state connectToServer */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer() {
		exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1();
		exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
	}
	
	/* Default exit sequence for state success */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state fail */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail();
	}
	
	/* Default exit sequence for state standby */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state networkTimeout */
	private void exitSequence_main_SmartTVSystem_connectionStatus_networkTimeout() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_SmartTVSystem_powerConsumption_off() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state consuming_power */
	private void exitSequence_main_SmartTVSystem_powerConsumption_consuming_power() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_SmartTVSystem_powerConsumption_consuming_power();
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_SMARTTVSYSTEM_TVSTATUS_OFF:
			exitSequence_main_SmartTVSystem_tvStatus_Off();
			break;
		case MAIN_SMARTTVSYSTEM_TVSTATUS_ON:
			exitSequence_main_SmartTVSystem_tvStatus_On();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_RESTSTATE:
			exitSequence_main_SmartTVSystem_heatLevel_restState();
			break;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_HEATINGUP:
			exitSequence_main_SmartTVSystem_heatLevel_heatingUp();
			break;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_OVERHEAT:
			exitSequence_main_SmartTVSystem_heatLevel_overheat();
			break;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING:
			exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling();
			exitAction_main_SmartTVSystem_heatLevel_coolingState();
			break;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested();
			exitAction_main_SmartTVSystem_heatLevel_coolingState();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success();
			exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail();
			exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_NETWORKTIMEOUT:
			exitSequence_main_SmartTVSystem_connectionStatus_networkTimeout();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_OFF:
			exitSequence_main_SmartTVSystem_powerConsumption_off();
			break;
		case MAIN_SMARTTVSYSTEM_POWERCONSUMPTION_CONSUMING_POWER:
			exitSequence_main_SmartTVSystem_powerConsumption_consuming_power();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region set_rested */
	private void exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested() {
		switch (stateVector[1]) {
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_COOLING:
			exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling();
			break;
		case MAIN_SMARTTVSYSTEM_HEATLEVEL_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1() {
		switch (stateVector[2]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success();
			exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail();
			exitAction_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_STANDBY:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1() {
		switch (stateVector[2]) {
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_SUCCESS:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success();
			break;
		case MAIN_SMARTTVSYSTEM_CONNECTIONSTATUS_CHECKFORWIFICONNECTION_R1_CONNECTTOSERVER_R1_FAIL:
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1__choice_0() {
		if (wifi.getConnection()) {
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success_default();
		} else {
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_SmartTVSystem_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_tvStatus__entry_Default() {
		enterSequence_main_SmartTVSystem_tvStatus_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_heatLevel__entry_Default() {
		enterSequence_main_SmartTVSystem_heatLevel_restState_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_heatLevel_coolingState_set_rested__entry_Default() {
		enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_SmartTVSystem_connectionStatus__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_SmartTVSystem_connectionStatus();
		} else {
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1__entry_Default() {
		enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1__entry_Default() {
		react_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_SmartTVSystem_powerConsumption__entry_Default() {
		enterSequence_main_SmartTVSystem_powerConsumption_off_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_SmartTVSystem_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_tvStatus_Off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (turn_on) {
				exitSequence_main_SmartTVSystem_tvStatus_Off();
				enterSequence_main_SmartTVSystem_tvStatus_On_default();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			raiseOff();
			
			message.setStatus("Off");
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_tvStatus_On_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (turn_off) {
				exitSequence_main_SmartTVSystem_tvStatus_On();
				enterSequence_main_SmartTVSystem_tvStatus_Off_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_restState_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (turn_on) {
				exitSequence_main_SmartTVSystem_heatLevel_restState();
				raiseHeating_up();
				
				enterSequence_main_SmartTVSystem_heatLevel_heatingUp_default();
				transitioned_after = 1l;
			} else {
				if (heat.getLevel()>0l) {
					exitSequence_main_SmartTVSystem_heatLevel_restState();
					enterSequence_main_SmartTVSystem_heatLevel_coolingState_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_heatingUp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (turn_off) {
				exitSequence_main_SmartTVSystem_heatLevel_heatingUp();
				enterSequence_main_SmartTVSystem_heatLevel_restState_default();
				transitioned_after = 1l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_SmartTVSystem_heatLevel_heatingUp();
					timeEvents[0] = false;
					enterSequence_main_SmartTVSystem_heatLevel_heatingUp_default();
					transitioned_after = 1l;
				} else {
					if (heat.getLevel()>=getThreshold()) {
						exitSequence_main_SmartTVSystem_heatLevel_heatingUp();
						enterSequence_main_SmartTVSystem_heatLevel_overheat_default();
						transitioned_after = 1l;
					} else {
						if (heat.getLevel()>=getCrash_value()) {
							exitSequence_main_SmartTVSystem_heatLevel_heatingUp();
							enterSequence_main_SmartTVSystem_heatLevel_coolingState_default();
							transitioned_after = 1l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_overheat_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if ((((timeEvents[1] || heat.continueEvent)) && (!heat.getUser_warned()))) {
				exitSequence_main_SmartTVSystem_heatLevel_overheat();
				heat.setUser_warned(true);
				
				timeEvents[1] = false;
				enterSequence_main_SmartTVSystem_heatLevel_heatingUp_default();
				transitioned_after = 1l;
			} else {
				if ((heat.rest || turn_off)) {
					exitSequence_main_SmartTVSystem_heatLevel_overheat();
					enterSequence_main_SmartTVSystem_heatLevel_coolingState_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_coolingState_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (timeEvents[2]) {
				exitSequence_main_SmartTVSystem_heatLevel_coolingState();
				heat.setLevel(heat.getLevel() - 1l);
				
				heat.setUser_warned(false);
				
				timeEvents[2] = false;
				enterSequence_main_SmartTVSystem_heatLevel_coolingState_default();
				transitioned_after = 1l;
			} else {
				if (((turn_on) && (heat.getLevel()<getThreshold()))) {
					exitSequence_main_SmartTVSystem_heatLevel_coolingState();
					enterSequence_main_SmartTVSystem_heatLevel_restState_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (heat.getLevel()==0l) {
				exitSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_cooling();
				enterSequence_main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested_default();
				main_SmartTVSystem_heatLevel_coolingState_react(1l);
				
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_heatLevel_coolingState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_heatLevel_coolingState_set_rested_fully_rested_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (getFully_rested()) {
				exitSequence_main_SmartTVSystem_heatLevel_coolingState();
				enterSequence_main_SmartTVSystem_heatLevel_restState_default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_heatLevel_coolingState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_checkForWiFiConnection_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (timeEvents[3]) {
				exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection();
				timeEvents[3] = false;
				enterSequence_main_SmartTVSystem_connectionStatus_networkTimeout_default();
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_success_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_r1_fail_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (timeEvents[4]) {
				exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer();
				wifi.setConnection(true);
				
				timeEvents[4] = false;
				enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_default();
				main_SmartTVSystem_connectionStatus_checkForWiFiConnection_react(2l);
				
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			exitSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_standby();
			enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_default();
			main_SmartTVSystem_connectionStatus_checkForWiFiConnection_react(2l);
			
			transitioned_after = 2l;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_connectionStatus_checkForWiFiConnection_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_connectionStatus_networkTimeout_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (!wifi.getConnection()) {
				exitSequence_main_SmartTVSystem_connectionStatus_networkTimeout();
				enterSequence_main_SmartTVSystem_connectionStatus_checkForWiFiConnection_r1_connectToServer_default();
				historyVector[0] = stateVector[2];
				
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_powerConsumption_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (turn_on) {
				exitSequence_main_SmartTVSystem_powerConsumption_off();
				enterSequence_main_SmartTVSystem_powerConsumption_consuming_power_default();
				main_SmartTVSystem_react(0l);
				
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_SmartTVSystem_powerConsumption_consuming_power_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[5]) {
				exitSequence_main_SmartTVSystem_powerConsumption_consuming_power();
				power.totalTime++;
				
				timeEvents[5] = false;
				enterSequence_main_SmartTVSystem_powerConsumption_consuming_power_default();
				main_SmartTVSystem_react(0l);
				
				transitioned_after = 3l;
			} else {
				if (turn_off) {
					exitSequence_main_SmartTVSystem_powerConsumption_consuming_power();
					enterSequence_main_SmartTVSystem_powerConsumption_off_default();
					main_SmartTVSystem_react(0l);
					
					transitioned_after = 3l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_SmartTVSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
