/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.sc;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import com.yakindu.core.rx.Observer;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import smarthub.sc.LED;
import smarthub.sc.SmartFireSystem;
import smarthub.sc.SmartLightSystem;
import smarthub.sc.SmartTVSystem;

public class SmartHubSystem implements IStatemachine, ITimed {
	public static class MessageHandler {
		private SmartHubSystem parent;
		
		public MessageHandler(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean message;
		
		private String messageValue;
		
		
		protected void raiseMessage(String value) {
			synchronized(parent) {
				messageValue = value;
				message = true;
				messageObservable.next(value);
			}
		}
		
		private Observable<String> messageObservable = new Observable<String>();
		
		public Observable<String> getMessage() {
			return messageObservable;
		}
		
	}
	
	public static class HUB {
		private SmartHubSystem parent;
		
		public HUB(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean turnon_allsystem;
		
		
		public void raiseTurnon_allsystem() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					turnon_allsystem = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean turnoff_allsystem;
		
		
		public void raiseTurnoff_allsystem() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					turnoff_allsystem = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean bootAllSystems;
		
		public synchronized boolean getBootAllSystems() {
			synchronized(parent) {
				return bootAllSystems;
			}
		}
		
		public void setBootAllSystems(boolean value) {
			synchronized(parent) {
				this.bootAllSystems = value;
			}
		}
		
	}
	
	public static class Temperature {
		private SmartHubSystem parent;
		
		public Temperature(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean room;
		
		private long roomValue;
		
		
		protected void raiseRoom(long value) {
			synchronized(parent) {
				roomValue = value;
				room = true;
				roomObservable.next(value);
			}
		}
		
		private Observable<Long> roomObservable = new Observable<Long>();
		
		public Observable<Long> getRoom() {
			return roomObservable;
		}
		
		private boolean warning;
		
		
		public void raiseWarning() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					warning = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean auto_off;
		
		
		public void raiseAuto_off() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					auto_off = true;
				});
				parent.runCycle();
			}
		}
		
		private long check;
		
		public synchronized long getCheck() {
			synchronized(parent) {
				return check;
			}
		}
		
		public void setCheck(long value) {
			synchronized(parent) {
				this.check = value;
			}
		}
		
		private long threshold;
		
		public synchronized long getThreshold() {
			synchronized(parent) {
				return threshold;
			}
		}
		
		public void setThreshold(long value) {
			synchronized(parent) {
				this.threshold = value;
			}
		}
		
		private long lights;
		
		public synchronized long getLights() {
			synchronized(parent) {
				return lights;
			}
		}
		
		public void setLights(long value) {
			synchronized(parent) {
				this.lights = value;
			}
		}
		
		private long tv;
		
		public synchronized long getTv() {
			synchronized(parent) {
				return tv;
			}
		}
		
		public void setTv(long value) {
			synchronized(parent) {
				this.tv = value;
			}
		}
		
		private long total_device_temp;
		
		public synchronized long getTotal_device_temp() {
			synchronized(parent) {
				return total_device_temp;
			}
		}
		
		public void setTotal_device_temp(long value) {
			synchronized(parent) {
				this.total_device_temp = value;
			}
		}
		
		private long total_devices;
		
		public synchronized long getTotal_devices() {
			synchronized(parent) {
				return total_devices;
			}
		}
		
		public void setTotal_devices(long value) {
			synchronized(parent) {
				this.total_devices = value;
			}
		}
		
	}
	
	public static class STV {
		private SmartHubSystem parent;
		
		public STV(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private boolean wiFi_status;
		
		public synchronized boolean getWiFi_status() {
			synchronized(parent) {
				return wiFi_status;
			}
		}
		
		public void setWiFi_status(boolean value) {
			synchronized(parent) {
				this.wiFi_status = value;
			}
		}
		
		private long heat_level;
		
		public synchronized long getHeat_level() {
			synchronized(parent) {
				return heat_level;
			}
		}
		
		public void setHeat_level(long value) {
			synchronized(parent) {
				this.heat_level = value;
			}
		}
		
		private boolean overheat;
		
		public synchronized boolean getOverheat() {
			synchronized(parent) {
				return overheat;
			}
		}
		
		public void setOverheat(boolean value) {
			synchronized(parent) {
				this.overheat = value;
			}
		}
		
	}
	
	public static class SL {
		private SmartHubSystem parent;
		
		public SL(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private long queu_size;
		
		public synchronized long getQueu_size() {
			synchronized(parent) {
				return queu_size;
			}
		}
		
		public void setQueu_size(long value) {
			synchronized(parent) {
				this.queu_size = value;
			}
		}
		
		private boolean wiFi_connection;
		
		public synchronized boolean getWiFi_connection() {
			synchronized(parent) {
				return wiFi_connection;
			}
		}
		
		public void setWiFi_connection(boolean value) {
			synchronized(parent) {
				this.wiFi_connection = value;
			}
		}
		
		private boolean server_connection;
		
		public synchronized boolean getServer_connection() {
			synchronized(parent) {
				return server_connection;
			}
		}
		
		public void setServer_connection(boolean value) {
			synchronized(parent) {
				this.server_connection = value;
			}
		}
		
		private long timeout;
		
		public synchronized long getTimeout() {
			synchronized(parent) {
				return timeout;
			}
		}
		
		public void setTimeout(long value) {
			synchronized(parent) {
				this.timeout = value;
			}
		}
		
		private long temperature;
		
		public synchronized long getTemperature() {
			synchronized(parent) {
				return temperature;
			}
		}
		
		public void setTemperature(long value) {
			synchronized(parent) {
				this.temperature = value;
			}
		}
		
		private boolean overheat;
		
		public synchronized boolean getOverheat() {
			synchronized(parent) {
				return overheat;
			}
		}
		
		public void setOverheat(boolean value) {
			synchronized(parent) {
				this.overheat = value;
			}
		}
		
	}
	
	public static class SF {
		private SmartHubSystem parent;
		
		public SF(SmartHubSystem parent) {
			this.parent = parent;
		}
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean hUB_reset;
		
		
		public void raiseHUB_reset() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					hUB_reset = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean status;
		
		private String statusValue;
		
		
		protected void raiseStatus(String value) {
			synchronized(parent) {
				statusValue = value;
				status = true;
				statusObservable.next(value);
			}
		}
		
		private Observable<String> statusObservable = new Observable<String>();
		
		public Observable<String> getStatus() {
			return statusObservable;
		}
		
		private boolean safe;
		
		
		protected void raiseSafe() {
			synchronized(parent) {
				safe = true;
				safeObservable.next(null);
			}
		}
		
		private Observable<Void> safeObservable = new Observable<Void>();
		
		public Observable<Void> getSafe() {
			return safeObservable;
		}
		
		private boolean warning;
		
		
		protected void raiseWarning() {
			synchronized(parent) {
				warning = true;
				warningObservable.next(null);
			}
		}
		
		private Observable<Void> warningObservable = new Observable<Void>();
		
		public Observable<Void> getWarning() {
			return warningObservable;
		}
		
		private boolean danger;
		
		
		protected void raiseDanger() {
			synchronized(parent) {
				danger = true;
				dangerObservable.next(null);
			}
		}
		
		private Observable<Void> dangerObservable = new Observable<Void>();
		
		public Observable<Void> getDanger() {
			return dangerObservable;
		}
		
		private String sensor_trigger;
		
		public synchronized String getSensor_trigger() {
			synchronized(parent) {
				return sensor_trigger;
			}
		}
		
		public void setSensor_trigger(String value) {
			synchronized(parent) {
				this.sensor_trigger = value;
			}
		}
		
	}
	
	public static class Power {
		private SmartHubSystem parent;
		
		public Power(SmartHubSystem parent) {
			this.parent = parent;
		}
		private long totalPower;
		
		public synchronized long getTotalPower() {
			synchronized(parent) {
				return totalPower;
			}
		}
		
		public void setTotalPower(long value) {
			synchronized(parent) {
				this.totalPower = value;
			}
		}
		
	}
	
	protected MessageHandler messageHandler;
	
	protected HUB hUB;
	
	protected Temperature temperature;
	
	protected STV sTV;
	
	protected SL sL;
	
	protected SF sF;
	
	protected Power power;
	
	public enum State {
		MAIN_MAIN,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV,
		MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE,
		MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE,
		MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY,
		MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE,
		MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP,
		MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT,
		MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV,
		MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS,
		MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY,
		MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING,
		MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF,
		MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER,
		MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON,
		MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_ON,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF,
		MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY,
		MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP,
		MAIN_OFF,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[9];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[12];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean smartFireSC_Mode_warning;
	private boolean smartFireSC_Mode_danger;
	private boolean smartFireSC_Mode_safe;
	private boolean smartLightSC_light_on;
	private boolean smartLightSC_light_off;
	private boolean smartTVSC_on;
	private boolean smartTVSC_off;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(SmartHubSystem.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(SmartHubSystem.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(SmartHubSystem.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(SmartHubSystem.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public SmartHubSystem() {
		messageHandler = new MessageHandler(this);
		hUB = new HUB(this);
		temperature = new Temperature(this);
		sTV = new STV(this);
		sL = new SL(this);
		sF = new SF(this);
		power = new Power(this);
		for (int i = 0; i < 9; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setSmartFireSC(null);
		
		setSmartLightSC(null);
		
		setSmartTVSC(null);
		
		setLed(null);
		
		hUB.setBootAllSystems(false);
		
		temperature.setCheck(0l);
		
		temperature.setThreshold(50l);
		
		temperature.setLights(0l);
		
		temperature.setTv(0l);
		
		temperature.setTotal_device_temp(0l);
		
		temperature.setTotal_devices(0l);
		
		sTV.setWiFi_status(false);
		
		sTV.setHeat_level(0l);
		
		sTV.setOverheat(false);
		
		sL.setQueu_size(0l);
		
		sL.setWiFi_connection(false);
		
		sL.setServer_connection(false);
		
		sL.setTimeout(0l);
		
		sL.setTemperature(0l);
		
		sL.setOverheat(false);
		
		sF.setSensor_trigger("");
		
		power.setTotalPower(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$||stateVector[6] != State.$NULLSTATE$||stateVector[7] != State.$NULLSTATE$||stateVector[8] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		toggle = false;
		hUB.turnon_allsystem = false;
		hUB.turnoff_allsystem = false;
		temperature.warning = false;
		temperature.auto_off = false;
		sTV.off = false;
		sTV.on = false;
		sL.off = false;
		sL.on = false;
		sF.off = false;
		sF.on = false;
		sF.hUB_reset = false;
		smartFireSC_Mode_warning = false;
		smartFireSC_Mode_danger = false;
		smartFireSC_Mode_safe = false;
		smartLightSC_light_on = false;
		smartLightSC_light_off = false;
		smartTVSC_on = false;
		smartTVSC_off = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
		timeEvents[10] = false;
		timeEvents[11] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF:
			transitioned = main_main_smartHubRegion_entryState_entryRegion_allSystems_off_react(transitioned);
			break;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS:
			transitioned = main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights_react(transitioned);
			break;
		case MAIN_OFF:
			transitioned = main_off_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV:
				transitioned = main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE:
				transitioned = main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY:
				transitioned = main_main_temperatureRegion_calculate_temperature_detect_first_device_standby_react(transitioned);
				break;
			case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE:
				transitioned = main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device_react(transitioned);
				break;
			case MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP:
				transitioned = main_main_temperatureRegion_increase_temp_react(transitioned);
				break;
			case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV:
				transitioned = main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV_react(transitioned);
				break;
			case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS:
				transitioned = main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY:
				transitioned = main_main_smartFireRegion_smartFire_standby_react(transitioned);
				break;
			case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING:
				transitioned = main_main_smartFireRegion_smartFire_warning_react(transitioned);
				break;
			case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF:
				transitioned = main_main_smartFireRegion_smartFire_off_react(transitioned);
				break;
			case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS:
				transitioned = main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5l) {
			switch (stateVector[5]) {
			case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES:
				transitioned = main_main_smartLightRegion_smartLights_idle_initialize_initialize_values_react(transitioned);
				break;
			case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON:
				transitioned = main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on_react(transitioned);
				break;
			case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT:
				transitioned = main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<6l) {
			switch (stateVector[6]) {
			case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
				transitioned = main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_react(transitioned);
				break;
			case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
				transitioned = main_main_smartLightRegion_smartLights_idle_temperature_system_rested_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<7l) {
			switch (stateVector[7]) {
			case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
				transitioned = main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down_react(transitioned);
				break;
			case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
				transitioned = main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested_react(transitioned);
				break;
			case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP:
				transitioned = main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up_react(transitioned);
				break;
			case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF:
				transitioned = main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff_react(transitioned);
				break;
			case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY:
				transitioned = main_main_smartTVRegion_smartTV_on_overheat_warning_emergency_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<8l) {
			switch (stateVector[8]) {
			case MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP:
				main_main_powerConsumption_calculate_temp_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((((((((((((((((((((((toggle || hUB.turnon_allsystem) || hUB.turnoff_allsystem) || temperature.warning) || temperature.auto_off) || sTV.off) || sTV.on) || sL.off) || sL.on) || sF.off) || sF.on) || sF.hUB_reset) || smartFireSC_Mode_warning) || smartFireSC_Mode_danger) || smartFireSC_Mode_safe) || smartLightSC_light_on) || smartLightSC_light_off) || smartTVSC_on) || smartTVSC_off) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]) || timeEvents[8]) || timeEvents[9]) || timeEvents[10]) || timeEvents[11]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MAIN:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP.ordinal();
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE.ordinal();
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF:
			return stateVector[0] == State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE.ordinal();
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS:
			return stateVector[0] == State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV:
			return stateVector[1] == State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE:
			return stateVector[2] == State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE;
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE:
			return stateVector[3].ordinal() >= State.
					MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE.ordinal()&& stateVector[3].ordinal() <= State.MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE.ordinal();
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY:
			return stateVector[3] == State.MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY;
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE:
			return stateVector[3] == State.MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE;
		case MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP:
			return stateVector[3] == State.MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT:
			return stateVector[3].ordinal() >= State.
					MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT.ordinal()&& stateVector[3].ordinal() <= State.MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS.ordinal();
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV:
			return stateVector[3] == State.MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS:
			return stateVector[3] == State.MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY:
			return stateVector[4] == State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING:
			return stateVector[4] == State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF:
			return stateVector[4] == State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER:
			return stateVector[4].ordinal() >= State.
					MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER.ordinal()&& stateVector[4].ordinal() <= State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS.ordinal();
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS:
			return stateVector[4] == State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE:
			return stateVector[5].ordinal() >= State.
					MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE.ordinal()&& stateVector[5].ordinal() <= State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED.ordinal();
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES:
			return stateVector[5] == State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
			return stateVector[6] == State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
			return stateVector[6] == State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON:
			return stateVector[5].ordinal() >= State.
					MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON.ordinal()&& stateVector[5].ordinal() <= State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT.ordinal();
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON:
			return stateVector[5] == State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT:
			return stateVector[5] == State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF:
			return stateVector[7].ordinal() >= State.
					MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF.ordinal()&& stateVector[7].ordinal() <= State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED.ordinal();
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES:
			return stateVector[7].ordinal() >= State.
					MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES.ordinal()&& stateVector[7].ordinal() <= State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED.ordinal();
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
			return stateVector[7] == State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
			return stateVector[7] == State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON:
			return stateVector[7].ordinal() >= State.
					MAIN_MAIN_SMARTTVREGION_SMARTTV_ON.ordinal()&& stateVector[7].ordinal() <= State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY.ordinal();
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP:
			return stateVector[7] == State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF:
			return stateVector[7] == State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY:
			return stateVector[7] == State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY;
		case MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP:
			return stateVector[8] == State.MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP;
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public MessageHandler messageHandler() {
		return messageHandler;
	}
	
	public HUB hUB() {
		return hUB;
	}
	
	public Temperature temperature() {
		return temperature;
	}
	
	public STV sTV() {
		return sTV;
	}
	
	public SL sL() {
		return sL;
	}
	
	public SF sF() {
		return sF;
	}
	
	public Power power() {
		return power;
	}
	
	
	protected void raiseSmartFireSC_Mode_warning() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartFireSC_Mode_warning = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartFireSC_Mode_danger() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartFireSC_Mode_danger = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartFireSC_Mode_safe() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartFireSC_Mode_safe = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartLightSC_light_on() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartLightSC_light_on = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartLightSC_light_off() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartLightSC_light_off = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartTVSC_on() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartTVSC_on = true;
			});
			runCycle();
		}
	}
	
	protected void raiseSmartTVSC_off() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				smartTVSC_off = true;
			});
			runCycle();
		}
	}
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(SmartHubSystem.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private SmartFireSystem smartFireSC;
	
	private Observer<Void> smartFireSC_Mode_warning_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartFireSC_Mode_warning();
		}
	};
	
	private Observer<Void> smartFireSC_Mode_danger_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartFireSC_Mode_danger();
		}
	};
	
	private Observer<Void> smartFireSC_Mode_safe_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartFireSC_Mode_safe();
		}
	};
	
	
	public synchronized SmartFireSystem getSmartFireSC() {
		synchronized(SmartHubSystem.this) {
			return smartFireSC;
		}
	}
	
	public void setSmartFireSC(SmartFireSystem value) {
		synchronized(SmartHubSystem.this) {
			if (this.smartFireSC != null) {
				this.smartFireSC.mode().getWarning().unsubscribe(smartFireSC_Mode_warning_observer);
				this.smartFireSC.mode().getDanger().unsubscribe(smartFireSC_Mode_danger_observer);
				this.smartFireSC.mode().getSafe().unsubscribe(smartFireSC_Mode_safe_observer);
			}
			
			this.smartFireSC = value;
			
			if (this.smartFireSC != null) {
				this.smartFireSC.mode().getWarning().subscribe(smartFireSC_Mode_warning_observer);
				this.smartFireSC.mode().getDanger().subscribe(smartFireSC_Mode_danger_observer);
				this.smartFireSC.mode().getSafe().subscribe(smartFireSC_Mode_safe_observer);
			}
		}
	}
	
	private SmartLightSystem smartLightSC;
	
	private Observer<Void> smartLightSC_light_on_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartLightSC_light_on();
		}
	};
	
	private Observer<Void> smartLightSC_light_off_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartLightSC_light_off();
		}
	};
	
	
	public synchronized SmartLightSystem getSmartLightSC() {
		synchronized(SmartHubSystem.this) {
			return smartLightSC;
		}
	}
	
	public void setSmartLightSC(SmartLightSystem value) {
		synchronized(SmartHubSystem.this) {
			if (this.smartLightSC != null) {
				this.smartLightSC.getLight_on().unsubscribe(smartLightSC_light_on_observer);
				this.smartLightSC.getLight_off().unsubscribe(smartLightSC_light_off_observer);
			}
			
			this.smartLightSC = value;
			
			if (this.smartLightSC != null) {
				this.smartLightSC.getLight_on().subscribe(smartLightSC_light_on_observer);
				this.smartLightSC.getLight_off().subscribe(smartLightSC_light_off_observer);
			}
		}
	}
	
	private SmartTVSystem smartTVSC;
	
	private Observer<Void> smartTVSC_on_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartTVSC_on();
		}
	};
	
	private Observer<Void> smartTVSC_off_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseSmartTVSC_off();
		}
	};
	
	
	public synchronized SmartTVSystem getSmartTVSC() {
		synchronized(SmartHubSystem.this) {
			return smartTVSC;
		}
	}
	
	public void setSmartTVSC(SmartTVSystem value) {
		synchronized(SmartHubSystem.this) {
			if (this.smartTVSC != null) {
				this.smartTVSC.getOn().unsubscribe(smartTVSC_on_observer);
				this.smartTVSC.getOff().unsubscribe(smartTVSC_off_observer);
			}
			
			this.smartTVSC = value;
			
			if (this.smartTVSC != null) {
				this.smartTVSC.getOn().subscribe(smartTVSC_on_observer);
				this.smartTVSC.getOff().subscribe(smartTVSC_off_observer);
			}
		}
	}
	
	private LED led;
	
	public synchronized LED getLed() {
		synchronized(SmartHubSystem.this) {
			return led;
		}
	}
	
	public void setLed(LED value) {
		synchronized(SmartHubSystem.this) {
			this.led = value;
		}
	}
	
	/* Entry action for state 'main'. */
	private void entryAction_main_main() {
		getSmartFireSC().enter();
		
		getSmartLightSC().enter();
		
		getSmartTVSC().enter();
	}
	
	/* Entry action for state 'entryState'. */
	private void entryAction_main_main_smartHubRegion_entryState() {
		messageHandler.raiseMessage("Statechart entered");
	}
	
	/* Entry action for state 'allSystems_off'. */
	private void entryAction_main_main_smartHubRegion_entryState_entryRegion_allSystems_off() {
		hUB.setBootAllSystems(false);
		
		getSmartLightSC().raiseOff();
	}
	
	/* Entry action for state 'bootAllSystems'. */
	private void entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems() {
		hUB.setBootAllSystems(true);
	}
	
	/* Entry action for state 'smartLights'. */
	private void entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights() {
		sL.raiseOn();
	}
	
	/* Entry action for state 'smartTV'. */
	private void entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV() {
		getSmartTVSC().raiseTurn_on();
		
		sTV.raiseStatus("TV is on");
	}
	
	/* Entry action for state 'calculate_temperature'. */
	private void entryAction_main_main_temperatureRegion_calculate_temperature() {
		timerService.setTimer(this, 0, 500l, false);
		
		temperature.raiseRoom(32l);
		
		temperature.setTv(sTV.heat_level);
		
		temperature.setLights(sL.temperature);
		
		temperature.setTotal_device_temp((sTV.heat_level + sL.temperature));
	}
	
	/* Entry action for state 'initialize_device'. */
	private void entryAction_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device() {
		temperature.total_devices++;
	}
	
	/* Entry action for state 'increase_temp'. */
	private void entryAction_main_main_temperatureRegion_increase_temp() {
		timerService.setTimer(this, 1, 500l, false);
		
		timerService.setTimer(this, 2, 100l, false);
		
		temperature.setTv(sTV.heat_level);
		
		temperature.setLights(sL.temperature);
		
		temperature.setTotal_device_temp((sTV.heat_level + sL.temperature));
		
		temperature.raiseRoom((32l + ((temperature.getTotal_device_temp() / temperature.getTotal_devices()))));
		
		temperature.setCheck((32l + ((temperature.total_device_temp / temperature.total_devices))));
	}
	
	/* Entry action for state 'temp_overheat'. */
	private void entryAction_main_main_temperatureRegion_temp_overheat() {
		timerService.setTimer(this, 3, 500l, false);
		
		messageHandler.raiseMessage("Room overheating.");
	}
	
	/* Entry action for state 'turnoff_TV'. */
	private void entryAction_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV() {
		sTV.raiseOff();
	}
	
	/* Entry action for state 'turnoff_Lights'. */
	private void entryAction_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights() {
		sL.raiseOff();
	}
	
	/* Entry action for state 'smartFire_standby'. */
	private void entryAction_main_main_smartFireRegion_smartFire_standby() {
		messageHandler.raiseMessage("SF is entered");
		
		sF.raiseStatus(getSmartFireSC().message().getStatus());
		
		sF.raiseSafe();
	}
	
	/* Entry action for state 'smartFire_warning'. */
	private void entryAction_main_main_smartFireRegion_smartFire_warning() {
		sF.raiseStatus(getSmartFireSC().message().getStatus());
		
		sF.raiseWarning();
	}
	
	/* Entry action for state 'smartFire_off'. */
	private void entryAction_main_main_smartFireRegion_smartFire_off() {
		getSmartFireSC().raiseToggle();
		
		sF.raiseOn();
	}
	
	/* Entry action for state 'smartFire_danger'. */
	private void entryAction_main_main_smartFireRegion_smartFire_danger() {
		timerService.setTimer(this, 4, 500l, false);
		
		sF.raiseStatus(getSmartFireSC().message().getStatus());
		
		sF.raiseDanger();
	}
	
	/* Entry action for state 'sensor_status'. */
	private void entryAction_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status() {
		hUB.raiseTurnoff_allsystem();
	}
	
	/* Entry action for state 'smartLights_idle'. */
	private void entryAction_main_main_smartLightRegion_smartLights_idle() {
		sL.raiseOff();
		
		getSmartLightSC().getLed().raiseOff();
		
		sL.raiseStatus("Lights are off");
		
		getSmartLightSC().raiseOff();
	}
	
	/* Entry action for state 'initialize_values'. */
	private void entryAction_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values() {
		timerService.setTimer(this, 5, (1l * 1000l), false);
		
		sL.setWiFi_connection(smartLightSC.wiFi().getConnected());
		
		sL.setTimeout(smartLightSC.sensing().getWaitTime());
	}
	
	/* Entry action for state 'retrieve_temp'. */
	private void entryAction_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp() {
		timerService.setTimer(this, 6, (2l * 1000l), false);
		
		timerService.setTimer(this, 7, (1l * 1000l), false);
		
		sL.setTemperature(smartLightSC.getLed().light().getTemperature());
	}
	
	/* Entry action for state 'system_rested'. */
	private void entryAction_main_main_smartLightRegion_smartLights_idle_temperature_system_rested() {
		temperature.setTotal_devices(temperature.getTotal_devices() - 1l);
	}
	
	/* Entry action for state 'smartLights_on'. */
	private void entryAction_main_main_smartLightRegion_smartLights_on() {
		timerService.setTimer(this, 8, 100l, false);
		
		sL.raiseOn();
		
		sL.setQueu_size(smartLightSC.messages().getQueueSize());
		
		sL.setTimeout(smartLightSC.sensing().getWaitTime());
		
		sL.setWiFi_connection(smartLightSC.wiFi().getConnected());
		
		sL.setTemperature(smartLightSC.getLed().light().getTemperature());
		
		sL.setOverheat(smartLightSC.getLed().getOverheat());
		
		sL.raiseStatus("Lights are on");
		
		getSmartLightSC().raiseOn();
	}
	
	/* Entry action for state 'LED_on'. */
	private void entryAction_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on() {
		getSmartLightSC().wiFi().raiseConfirm();
		
		sL.setServer_connection(smartLightSC.server().getConnected());
	}
	
	/* Entry action for state 'overheat'. */
	private void entryAction_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat() {
		sL.raiseOff();
	}
	
	/* Entry action for state 'smartTV_off'. */
	private void entryAction_main_main_smartTVRegion_smartTV_off() {
		getSmartTVSC().raiseTurn_off();
		
		sTV.raiseStatus("TV is off");
		
		sTV.setWiFi_status(smartTVSC.wifi().getConnection());
	}
	
	/* Entry action for state 'initialize_values'. */
	private void entryAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values() {
		timerService.setTimer(this, 9, 500l, false);
		
		sTV.setWiFi_status(smartTVSC.wifi().getConnection());
		
		sTV.setHeat_level(smartTVSC.heat().getLevel());
		
		sTV.setOverheat(smartTVSC.heat().getUser_warned());
	}
	
	/* Entry action for state 'fully_rested'. */
	private void entryAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested() {
		if (temperature.getTotal_devices()>0l) {
			temperature.total_devices--;
			
			sTV.setHeat_level(0l);
		}
	}
	
	/* Entry action for state 'smartTV_on'. */
	private void entryAction_main_main_smartTVRegion_smartTV_on() {
		timerService.setTimer(this, 10, (1l * 1000l), false);
		
		sTV.setWiFi_status(smartTVSC.wifi().getConnection());
		
		sTV.setOverheat(smartTVSC.heat().getUser_warned());
		
		getSmartTVSC().raiseTurn_on();
		
		sTV.raiseStatus("TV is on");
	}
	
	/* Entry action for state 'warming_up'. */
	private void entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up() {
		sTV.setHeat_level(smartTVSC.heat().getLevel());
	}
	
	/* Entry action for state 'auto_turnoff'. */
	private void entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff() {
		sTV.raiseOff();
	}
	
	/* Entry action for state 'emergency'. */
	private void entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency() {
		sTV.raiseOff();
	}
	
	/* Entry action for state 'calculate_temp'. */
	private void entryAction_main_main_powerConsumption_calculate_temp() {
		timerService.setTimer(this, 11, (1l * 1000l), false);
		
		power.setTotalPower((smartTVSC.power().getElectricConsumption() + led.power().getElectricConsumption()));
	}
	
	/* Exit action for state 'calculate_temperature'. */
	private void exitAction_main_main_temperatureRegion_calculate_temperature() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'increase_temp'. */
	private void exitAction_main_main_temperatureRegion_increase_temp() {
		timerService.unsetTimer(this, 1);
		
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'temp_overheat'. */
	private void exitAction_main_main_temperatureRegion_temp_overheat() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'smartFire_danger'. */
	private void exitAction_main_main_smartFireRegion_smartFire_danger() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'initialize_values'. */
	private void exitAction_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'retrieve_temp'. */
	private void exitAction_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp() {
		timerService.unsetTimer(this, 6);
		
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'smartLights_on'. */
	private void exitAction_main_main_smartLightRegion_smartLights_on() {
		timerService.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'initialize_values'. */
	private void exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values() {
		timerService.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'smartTV_on'. */
	private void exitAction_main_main_smartTVRegion_smartTV_on() {
		timerService.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'calculate_temp'. */
	private void exitAction_main_main_powerConsumption_calculate_temp() {
		timerService.unsetTimer(this, 11);
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_main_default() {
		entryAction_main_main();
		enterSequence_main_main_smartHubRegion_default();
		enterSequence_main_main_temperatureRegion_default();
		enterSequence_main_main_smartFireRegion_default();
		enterSequence_main_main_smartLightRegion_default();
		enterSequence_main_main_smartTVRegion_default();
		enterSequence_main_main_powerConsumption_default();
	}
	
	/* 'default' enter sequence for state entryState */
	private void enterSequence_main_main_smartHubRegion_entryState_default() {
		entryAction_main_main_smartHubRegion_entryState();
		enterSequence_main_main_smartHubRegion_entryState_entryRegion_default();
	}
	
	/* 'default' enter sequence for state allSystems_off */
	private void enterSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off_default() {
		entryAction_main_main_smartHubRegion_entryState_entryRegion_allSystems_off();
		stateVector[0] = State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state smartLights */
	private void enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights_default() {
		entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights();
		stateVector[0] = State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state smartTV */
	private void enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV_default() {
		entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV();
		stateVector[1] = State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state smartFire */
	private void enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire_default() {
		stateVector[2] = State.MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state calculate_temperature */
	private void enterSequence_main_main_temperatureRegion_calculate_temperature_default() {
		entryAction_main_main_temperatureRegion_calculate_temperature();
		enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_default();
	}
	
	/* 'default' enter sequence for state standby */
	private void enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby_default() {
		stateVector[3] = State.MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state initialize_device */
	private void enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device_default() {
		entryAction_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device();
		stateVector[3] = State.MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state increase_temp */
	private void enterSequence_main_main_temperatureRegion_increase_temp_default() {
		entryAction_main_main_temperatureRegion_increase_temp();
		stateVector[3] = State.MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state temp_overheat */
	private void enterSequence_main_main_temperatureRegion_temp_overheat_default() {
		entryAction_main_main_temperatureRegion_temp_overheat();
		enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_default();
	}
	
	/* 'default' enter sequence for state turnoff_TV */
	private void enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV_default() {
		entryAction_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV();
		stateVector[3] = State.MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state turnoff_Lights */
	private void enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights_default() {
		entryAction_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights();
		stateVector[3] = State.MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state smartFire_standby */
	private void enterSequence_main_main_smartFireRegion_smartFire_standby_default() {
		entryAction_main_main_smartFireRegion_smartFire_standby();
		stateVector[4] = State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state smartFire_warning */
	private void enterSequence_main_main_smartFireRegion_smartFire_warning_default() {
		entryAction_main_main_smartFireRegion_smartFire_warning();
		stateVector[4] = State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state smartFire_off */
	private void enterSequence_main_main_smartFireRegion_smartFire_off_default() {
		entryAction_main_main_smartFireRegion_smartFire_off();
		stateVector[4] = State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state smartFire_danger */
	private void enterSequence_main_main_smartFireRegion_smartFire_danger_default() {
		entryAction_main_main_smartFireRegion_smartFire_danger();
		enterSequence_main_main_smartFireRegion_smartFire_danger_danger_status_default();
	}
	
	/* 'default' enter sequence for state sensor_status */
	private void enterSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status_default() {
		entryAction_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status();
		stateVector[4] = State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state smartLights_idle */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_default() {
		entryAction_main_main_smartLightRegion_smartLights_idle();
		enterSequence_main_main_smartLightRegion_smartLights_idle_initialize_default();
		enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_default();
	}
	
	/* 'default' enter sequence for state initialize_values */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values_default() {
		entryAction_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
		stateVector[5] = State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state retrieve_temp */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_default() {
		entryAction_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
		stateVector[6] = State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP;
		stateConfVectorPosition = 6;
		
		historyVector[0] = stateVector[6];
	}
	
	/* 'default' enter sequence for state system_rested */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested_default() {
		entryAction_main_main_smartLightRegion_smartLights_idle_temperature_system_rested();
		stateVector[6] = State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED;
		stateConfVectorPosition = 6;
		
		historyVector[0] = stateVector[6];
	}
	
	/* 'default' enter sequence for state smartLights_on */
	private void enterSequence_main_main_smartLightRegion_smartLights_on_default() {
		entryAction_main_main_smartLightRegion_smartLights_on();
		enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_default();
	}
	
	/* 'default' enter sequence for state LED_on */
	private void enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on_default() {
		entryAction_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on();
		stateVector[5] = State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state overheat */
	private void enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat_default() {
		entryAction_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat();
		stateVector[5] = State.MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state smartTV_off */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_default() {
		entryAction_main_main_smartTVRegion_smartTV_off();
		enterSequence_main_main_smartTVRegion_smartTV_off_initialize_default();
	}
	
	/* 'default' enter sequence for state initialize_values */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_default() {
		entryAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
		enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_default();
	}
	
	/* 'default' enter sequence for state cooling_down */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down_default() {
		stateVector[7] = State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state fully_rested */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested_default() {
		entryAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested();
		stateVector[7] = State.MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state smartTV_on */
	private void enterSequence_main_main_smartTVRegion_smartTV_on_default() {
		entryAction_main_main_smartTVRegion_smartTV_on();
		enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_default();
	}
	
	/* 'default' enter sequence for state warming_up */
	private void enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up_default() {
		entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
		stateVector[7] = State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state auto_turnoff */
	private void enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff_default() {
		entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff();
		stateVector[7] = State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state emergency */
	private void enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency_default() {
		entryAction_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency();
		stateVector[7] = State.MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY;
		stateConfVectorPosition = 7;
	}
	
	/* 'default' enter sequence for state calculate_temp */
	private void enterSequence_main_main_powerConsumption_calculate_temp_default() {
		entryAction_main_main_powerConsumption_calculate_temp();
		stateVector[8] = State.MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP;
		stateConfVectorPosition = 8;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_off_default() {
		stateVector[0] = State.MAIN_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region smartHubRegion */
	private void enterSequence_main_main_smartHubRegion_default() {
		react_main_main_smartHubRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region entryRegion */
	private void enterSequence_main_main_smartHubRegion_entryState_entryRegion_default() {
		react_main_main_smartHubRegion_entryState_entryRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region temperatureRegion */
	private void enterSequence_main_main_temperatureRegion_default() {
		react_main_main_temperatureRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region detect_first_device */
	private void enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_default() {
		react_main_main_temperatureRegion_calculate_temperature_detect_first_device__entry_Default();
	}
	
	/* 'default' enter sequence for region checkOverheat */
	private void enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_default() {
		react_main_main_temperatureRegion_temp_overheat_checkOverheat__entry_Default();
	}
	
	/* 'default' enter sequence for region smartFireRegion */
	private void enterSequence_main_main_smartFireRegion_default() {
		react_main_main_smartFireRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region danger_status */
	private void enterSequence_main_main_smartFireRegion_smartFire_danger_danger_status_default() {
		react_main_main_smartFireRegion_smartFire_danger_danger_status__entry_Default();
	}
	
	/* 'default' enter sequence for region smartLightRegion */
	private void enterSequence_main_main_smartLightRegion_default() {
		react_main_main_smartLightRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region initialize */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_initialize_default() {
		react_main_main_smartLightRegion_smartLights_idle_initialize__entry_Default();
	}
	
	/* 'default' enter sequence for region temperature */
	private void enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_default() {
		react_main_main_smartLightRegion_smartLights_idle_temperature__entry_Default();
	}
	
	/* deep enterSequence with history in child temperature */
	private void deepEnterSequence_main_main_smartLightRegion_smartLights_idle_temperature() {
		switch (historyVector[0]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
			enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_default();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
			enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region confirming_WiFiconnection */
	private void enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_default() {
		react_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection__entry_Default();
	}
	
	/* 'default' enter sequence for region smartTVRegion */
	private void enterSequence_main_main_smartTVRegion_default() {
		react_main_main_smartTVRegion__entry_Default();
	}
	
	/* 'default' enter sequence for region initialize */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_initialize_default() {
		react_main_main_smartTVRegion_smartTV_off_initialize__entry_Default();
	}
	
	/* 'default' enter sequence for region temperature */
	private void enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_default() {
		react_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature__entry_Default();
	}
	
	/* 'default' enter sequence for region overheat_warning */
	private void enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_default() {
		react_main_main_smartTVRegion_smartTV_on_overheat_warning__entry_Default();
	}
	
	/* 'default' enter sequence for region powerConsumption */
	private void enterSequence_main_main_powerConsumption_default() {
		react_main_main_powerConsumption__entry_Default();
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_main() {
		exitSequence_main_main_smartHubRegion();
		exitSequence_main_main_temperatureRegion();
		exitSequence_main_main_smartFireRegion();
		exitSequence_main_main_smartLightRegion();
		exitSequence_main_main_smartTVRegion();
		exitSequence_main_main_powerConsumption();
	}
	
	/* Default exit sequence for state allSystems_off */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state bootAllSystems */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems() {
		exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1();
		exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2();
		exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3();
	}
	
	/* Default exit sequence for state smartLights */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state smartTV */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state smartFire */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state calculate_temperature */
	private void exitSequence_main_main_temperatureRegion_calculate_temperature() {
		exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device();
		exitAction_main_main_temperatureRegion_calculate_temperature();
	}
	
	/* Default exit sequence for state standby */
	private void exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state initialize_device */
	private void exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state increase_temp */
	private void exitSequence_main_main_temperatureRegion_increase_temp() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_main_temperatureRegion_increase_temp();
	}
	
	/* Default exit sequence for state temp_overheat */
	private void exitSequence_main_main_temperatureRegion_temp_overheat() {
		exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat();
		exitAction_main_main_temperatureRegion_temp_overheat();
	}
	
	/* Default exit sequence for state turnoff_TV */
	private void exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state turnoff_Lights */
	private void exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state smartFire_standby */
	private void exitSequence_main_main_smartFireRegion_smartFire_standby() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state smartFire_warning */
	private void exitSequence_main_main_smartFireRegion_smartFire_warning() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state smartFire_off */
	private void exitSequence_main_main_smartFireRegion_smartFire_off() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state smartFire_danger */
	private void exitSequence_main_main_smartFireRegion_smartFire_danger() {
		exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status();
		exitAction_main_main_smartFireRegion_smartFire_danger();
	}
	
	/* Default exit sequence for state sensor_status */
	private void exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
	}
	
	/* Default exit sequence for state smartLights_idle */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle() {
		exitSequence_main_main_smartLightRegion_smartLights_idle_initialize();
		exitSequence_main_main_smartLightRegion_smartLights_idle_temperature();
	}
	
	/* Default exit sequence for state initialize_values */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		
		exitAction_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
	}
	
	/* Default exit sequence for state retrieve_temp */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		
		exitAction_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
	}
	
	/* Default exit sequence for state system_rested */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
	}
	
	/* Default exit sequence for state smartLights_on */
	private void exitSequence_main_main_smartLightRegion_smartLights_on() {
		exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection();
		exitAction_main_main_smartLightRegion_smartLights_on();
	}
	
	/* Default exit sequence for state LED_on */
	private void exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state overheat */
	private void exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
	}
	
	/* Default exit sequence for state smartTV_off */
	private void exitSequence_main_main_smartTVRegion_smartTV_off() {
		exitSequence_main_main_smartTVRegion_smartTV_off_initialize();
	}
	
	/* Default exit sequence for state initialize_values */
	private void exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values() {
		exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature();
		exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
	}
	
	/* Default exit sequence for state cooling_down */
	private void exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state fully_rested */
	private void exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state smartTV_on */
	private void exitSequence_main_main_smartTVRegion_smartTV_on() {
		exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning();
		exitAction_main_main_smartTVRegion_smartTV_on();
	}
	
	/* Default exit sequence for state warming_up */
	private void exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state auto_turnoff */
	private void exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state emergency */
	private void exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency() {
		stateVector[7] = State.$NULLSTATE$;
		stateConfVectorPosition = 7;
	}
	
	/* Default exit sequence for state calculate_temp */
	private void exitSequence_main_main_powerConsumption_calculate_temp() {
		stateVector[8] = State.$NULLSTATE$;
		stateConfVectorPosition = 8;
		
		exitAction_main_main_powerConsumption_calculate_temp();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off();
			break;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights();
			break;
		case MAIN_OFF:
			exitSequence_main_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby();
			exitAction_main_main_temperatureRegion_calculate_temperature();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device();
			exitAction_main_main_temperatureRegion_calculate_temperature();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP:
			exitSequence_main_main_temperatureRegion_increase_temp();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV();
			exitAction_main_main_temperatureRegion_temp_overheat();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights();
			exitAction_main_main_temperatureRegion_temp_overheat();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY:
			exitSequence_main_main_smartFireRegion_smartFire_standby();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING:
			exitSequence_main_main_smartFireRegion_smartFire_warning();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF:
			exitSequence_main_main_smartFireRegion_smartFire_off();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS:
			exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status();
			exitAction_main_main_smartFireRegion_smartFire_danger();
			break;
		default:
			break;
		}
		
		switch (stateVector[5]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES:
			exitSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on();
			exitAction_main_main_smartLightRegion_smartLights_on();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat();
			exitAction_main_main_smartLightRegion_smartLights_on();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested();
			break;
		default:
			break;
		}
		
		switch (stateVector[7]) {
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		default:
			break;
		}
		
		switch (stateVector[8]) {
		case MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP:
			exitSequence_main_main_powerConsumption_calculate_temp();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smartHubRegion */
	private void exitSequence_main_main_smartHubRegion() {
		switch (stateVector[0]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_ALLSYSTEMS_OFF:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off();
			break;
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1() {
		switch (stateVector[0]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R1_SMARTLIGHTS:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2() {
		switch (stateVector[1]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R2_SMARTTV:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3() {
		switch (stateVector[2]) {
		case MAIN_MAIN_SMARTHUBREGION_ENTRYSTATE_ENTRYREGION_BOOTALLSYSTEMS_R3_SMARTFIRE:
			exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region temperatureRegion */
	private void exitSequence_main_main_temperatureRegion() {
		switch (stateVector[3]) {
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby();
			exitAction_main_main_temperatureRegion_calculate_temperature();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device();
			exitAction_main_main_temperatureRegion_calculate_temperature();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_INCREASE_TEMP:
			exitSequence_main_main_temperatureRegion_increase_temp();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV();
			exitAction_main_main_temperatureRegion_temp_overheat();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights();
			exitAction_main_main_temperatureRegion_temp_overheat();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region detect_first_device */
	private void exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device() {
		switch (stateVector[3]) {
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_STANDBY:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_CALCULATE_TEMPERATURE_DETECT_FIRST_DEVICE_INITIALIZE_DEVICE:
			exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region checkOverheat */
	private void exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat() {
		switch (stateVector[3]) {
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_TV:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV();
			break;
		case MAIN_MAIN_TEMPERATUREREGION_TEMP_OVERHEAT_CHECKOVERHEAT_TURNOFF_LIGHTS:
			exitSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smartFireRegion */
	private void exitSequence_main_main_smartFireRegion() {
		switch (stateVector[4]) {
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_STANDBY:
			exitSequence_main_main_smartFireRegion_smartFire_standby();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_WARNING:
			exitSequence_main_main_smartFireRegion_smartFire_warning();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_OFF:
			exitSequence_main_main_smartFireRegion_smartFire_off();
			break;
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS:
			exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status();
			exitAction_main_main_smartFireRegion_smartFire_danger();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region danger_status */
	private void exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status() {
		switch (stateVector[4]) {
		case MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER_DANGER_STATUS_SENSOR_STATUS:
			exitSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smartLightRegion */
	private void exitSequence_main_main_smartLightRegion() {
		switch (stateVector[5]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES:
			exitSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on();
			exitAction_main_main_smartLightRegion_smartLights_on();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat();
			exitAction_main_main_smartLightRegion_smartLights_on();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region initialize */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle_initialize() {
		switch (stateVector[5]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_INITIALIZE_INITIALIZE_VALUES:
			exitSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region temperature */
	private void exitSequence_main_main_smartLightRegion_smartLights_idle_temperature() {
		switch (stateVector[6]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_RETRIEVE_TEMP:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_IDLE_TEMPERATURE_SYSTEM_RESTED:
			exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region confirming_WiFiconnection */
	private void exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection() {
		switch (stateVector[5]) {
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_LED_ON:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on();
			break;
		case MAIN_MAIN_SMARTLIGHTREGION_SMARTLIGHTS_ON_CONFIRMING_WIFICONNECTION_OVERHEAT:
			exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region smartTVRegion */
	private void exitSequence_main_main_smartTVRegion() {
		switch (stateVector[7]) {
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency();
			exitAction_main_main_smartTVRegion_smartTV_on();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region initialize */
	private void exitSequence_main_main_smartTVRegion_smartTV_off_initialize() {
		switch (stateVector[7]) {
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested();
			exitAction_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region temperature */
	private void exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature() {
		switch (stateVector[7]) {
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_COOLING_DOWN:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_OFF_INITIALIZE_INITIALIZE_VALUES_TEMPERATURE_FULLY_RESTED:
			exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region overheat_warning */
	private void exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning() {
		switch (stateVector[7]) {
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_WARMING_UP:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_AUTO_TURNOFF:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff();
			break;
		case MAIN_MAIN_SMARTTVREGION_SMARTTV_ON_OVERHEAT_WARNING_EMERGENCY:
			exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region powerConsumption */
	private void exitSequence_main_main_powerConsumption() {
		switch (stateVector[8]) {
		case MAIN_MAIN_POWERCONSUMPTION_CALCULATE_TEMP:
			exitSequence_main_main_powerConsumption_calculate_temp();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_main_temperatureRegion_temp_overheat_checkOverheat__choice_0() {
		if (temperature.getTv()>temperature.getLights()) {
			enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV_default();
		} else {
			enterSequence_main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartHubRegion_entryState_entryRegion__entry_Default() {
		enterSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartHubRegion__entry_Default() {
		enterSequence_main_main_smartHubRegion_entryState_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_temperatureRegion__entry_Default() {
		enterSequence_main_main_temperatureRegion_calculate_temperature_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_temperatureRegion_calculate_temperature_detect_first_device__entry_Default() {
		enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_temperatureRegion_temp_overheat_checkOverheat__entry_Default() {
		react_main_main_temperatureRegion_temp_overheat_checkOverheat__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartFireRegion_smartFire_danger_danger_status__entry_Default() {
		enterSequence_main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartFireRegion__entry_Default() {
		enterSequence_main_main_smartFireRegion_smartFire_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartLightRegion_smartLights_idle_initialize__entry_Default() {
		enterSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_smartLightRegion_smartLights_idle_temperature__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_smartLightRegion_smartLights_idle_temperature();
		} else {
			enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection__entry_Default() {
		enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartLightRegion__entry_Default() {
		enterSequence_main_main_smartLightRegion_smartLights_idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature__entry_Default() {
		enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartTVRegion_smartTV_off_initialize__entry_Default() {
		enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartTVRegion_smartTV_on_overheat_warning__entry_Default() {
		enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_smartTVRegion__entry_Default() {
		enterSequence_main_main_smartTVRegion_smartTV_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_powerConsumption__entry_Default() {
		enterSequence_main_main_powerConsumption_calculate_temp_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_main_default();
	}
	
	/* The reactions of state null. */
	private void react_main_main_smartHubRegion_entryState_entryRegion__sync0() {
		entryAction_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems();
		enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights_default();
		enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV_default();
		enterSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_main_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_main_main();
				enterSequence_main_off_default();
				react(0l);
				
				transitioned_after = 8l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_entryRegion_allSystems_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (hUB.turnon_allsystem) {
				exitSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off();
				react_main_main_smartHubRegion_entryState_entryRegion__sync0();
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartHubRegion_entryState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (hUB.turnoff_allsystem) {
				exitSequence_main_main_smartHubRegion_entryState_entryRegion_bootAllSystems();
				enterSequence_main_main_smartHubRegion_entryState_entryRegion_allSystems_off_default();
				main_main_smartHubRegion_entryState_react(0l);
				
				transitioned_after = 2l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartHubRegion_entryState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r1_smartLights_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r2_smartTV_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
		}
		return transitioned_after;
	}
	
	private long main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_r3_smartFire_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartHubRegion_entryState_entryRegion_bootAllSystems_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_calculate_temperature_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (temperature.getTotal_devices()>=1l) {
				exitSequence_main_main_temperatureRegion_calculate_temperature();
				enterSequence_main_main_temperatureRegion_increase_temp_default();
				transitioned_after = 3l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_main_temperatureRegion_calculate_temperature();
					timeEvents[0] = false;
					enterSequence_main_main_temperatureRegion_calculate_temperature_default();
					transitioned_after = 3l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_calculate_temperature_detect_first_device_standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if ((sL.on || sTV.on)) {
				exitSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_standby();
				enterSequence_main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device_default();
				main_main_temperatureRegion_calculate_temperature_react(3l);
				
				transitioned_after = 3l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_temperatureRegion_calculate_temperature_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_calculate_temperature_detect_first_device_initialize_device_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_temperatureRegion_calculate_temperature_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_increase_temp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[1]) {
				exitSequence_main_main_temperatureRegion_increase_temp();
				timeEvents[1] = false;
				enterSequence_main_main_temperatureRegion_increase_temp_default();
				transitioned_after = 3l;
			} else {
				if (temperature.getTotal_devices()<=0l) {
					exitSequence_main_main_temperatureRegion_increase_temp();
					enterSequence_main_main_temperatureRegion_calculate_temperature_default();
					transitioned_after = 3l;
				} else {
					if (((timeEvents[2]) && (temperature.getCheck()>temperature.getThreshold()))) {
						exitSequence_main_main_temperatureRegion_increase_temp();
						timeEvents[2] = false;
						enterSequence_main_main_temperatureRegion_temp_overheat_default();
						transitioned_after = 3l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_temp_overheat_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[3]) {
				exitSequence_main_main_temperatureRegion_temp_overheat();
				timeEvents[3] = false;
				enterSequence_main_main_temperatureRegion_increase_temp_default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_TV_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_temperatureRegion_temp_overheat_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_temperatureRegion_temp_overheat_checkOverheat_turnoff_Lights_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_temperatureRegion_temp_overheat_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartFireRegion_smartFire_standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (smartFireSC_Mode_warning) {
				exitSequence_main_main_smartFireRegion_smartFire_standby();
				enterSequence_main_main_smartFireRegion_smartFire_warning_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartFireRegion_smartFire_warning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (smartFireSC_Mode_danger) {
				exitSequence_main_main_smartFireRegion_smartFire_warning();
				enterSequence_main_main_smartFireRegion_smartFire_danger_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartFireRegion_smartFire_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if ((sF.on || hUB.turnon_allsystem)) {
				exitSequence_main_main_smartFireRegion_smartFire_off();
				enterSequence_main_main_smartFireRegion_smartFire_standby_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartFireRegion_smartFire_danger_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (smartFireSC_Mode_safe) {
				exitSequence_main_main_smartFireRegion_smartFire_danger();
				enterSequence_main_main_smartFireRegion_smartFire_standby_default();
				transitioned_after = 4l;
			} else {
				if (timeEvents[4]) {
					exitSequence_main_main_smartFireRegion_smartFire_danger();
					timeEvents[4] = false;
					enterSequence_main_main_smartFireRegion_smartFire_danger_default();
					transitioned_after = 4l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartFireRegion_smartFire_danger_danger_status_sensor_status_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartFireRegion_smartFire_danger_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_idle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if ((sL.on || (smartLightSC_light_on || hUB.turnon_allsystem))) {
				exitSequence_main_main_smartLightRegion_smartLights_idle();
				enterSequence_main_main_smartLightRegion_smartLights_on_default();
				transitioned_after = 6l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_idle_initialize_initialize_values_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (timeEvents[5]) {
				exitSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values();
				timeEvents[5] = false;
				enterSequence_main_main_smartLightRegion_smartLights_idle_initialize_initialize_values_default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (((timeEvents[6]) && (sL.getTemperature()==0l))) {
				exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
				timeEvents[6] = false;
				enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_system_rested_default();
				main_main_smartLightRegion_smartLights_idle_react(5l);
				
				transitioned_after = 6l;
			} else {
				if (timeEvents[7]) {
					exitSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp();
					timeEvents[7] = false;
					enterSequence_main_main_smartLightRegion_smartLights_idle_temperature_retrieve_temp_default();
					main_main_smartLightRegion_smartLights_idle_react(5l);
					
					transitioned_after = 6l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartLightRegion_smartLights_idle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_idle_temperature_system_rested_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartLightRegion_smartLights_idle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if ((sL.off || (smartLightSC_light_off || hUB.turnoff_allsystem))) {
				exitSequence_main_main_smartLightRegion_smartLights_on();
				getSmartLightSC().getLed().raiseOff();
				
				enterSequence_main_main_smartLightRegion_smartLights_idle_default();
				transitioned_after = 5l;
			} else {
				if (timeEvents[8]) {
					exitSequence_main_main_smartLightRegion_smartLights_on();
					timeEvents[8] = false;
					enterSequence_main_main_smartLightRegion_smartLights_on_default();
					transitioned_after = 5l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (sL.getTemperature()>=4l) {
				exitSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_LED_on();
				enterSequence_main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat_default();
				main_main_smartLightRegion_smartLights_on_react(5l);
				
				transitioned_after = 5l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartLightRegion_smartLights_on_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartLightRegion_smartLights_on_confirming_WiFiconnection_overheat_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartLightRegion_smartLights_on_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
			if (((sTV.on) && (!isStateActive(State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER)))) {
				exitSequence_main_main_smartTVRegion_smartTV_off();
				temperature.total_devices++;
				
				enterSequence_main_main_smartTVRegion_smartTV_on_default();
				transitioned_after = 7l;
			} else {
				if (((smartTVSC_on) && (getSmartTVSC().wifi().getConnection()))) {
					exitSequence_main_main_smartTVRegion_smartTV_off();
					enterSequence_main_main_smartTVRegion_smartTV_on_default();
					transitioned_after = 7l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_off_initialize_initialize_values_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
			if (timeEvents[9]) {
				exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values();
				timeEvents[9] = false;
				enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_default();
				main_main_smartTVRegion_smartTV_off_react(7l);
				
				transitioned_after = 7l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_off_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
			if (getSmartTVSC().getFully_rested()) {
				exitSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_cooling_down();
				enterSequence_main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested_default();
				main_main_smartTVRegion_smartTV_off_initialize_initialize_values_react(7l);
				
				transitioned_after = 7l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_off_initialize_initialize_values_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_off_initialize_initialize_values_temperature_fully_rested_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_off_initialize_initialize_values_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
			if ((((sTV.off || smartTVSC_off)) && (getSmartTVSC().wifi().getConnection()))) {
				exitSequence_main_main_smartTVRegion_smartTV_on();
				enterSequence_main_main_smartTVRegion_smartTV_off_default();
				transitioned_after = 7l;
			} else {
				if (timeEvents[10]) {
					exitSequence_main_main_smartTVRegion_smartTV_on();
					timeEvents[10] = false;
					enterSequence_main_main_smartTVRegion_smartTV_on_default();
					transitioned_after = 7l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
			if (sTV.getOverheat()) {
				exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
				enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff_default();
				main_main_smartTVRegion_smartTV_on_react(7l);
				
				transitioned_after = 7l;
			} else {
				if (isStateActive(State.MAIN_MAIN_SMARTFIREREGION_SMARTFIRE_DANGER)) {
					exitSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_warming_up();
					enterSequence_main_main_smartTVRegion_smartTV_on_overheat_warning_emergency_default();
					main_main_smartTVRegion_smartTV_on_react(7l);
					
					transitioned_after = 7l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_on_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_on_overheat_warning_auto_turnoff_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_on_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_smartTVRegion_smartTV_on_overheat_warning_emergency_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<7l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_smartTVRegion_smartTV_on_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_main_powerConsumption_calculate_temp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<8l) {
			if (timeEvents[11]) {
				exitSequence_main_main_powerConsumption_calculate_temp();
				timeEvents[11] = false;
				enterSequence_main_main_powerConsumption_calculate_temp_default();
				main_main_react(0l);
				
				transitioned_after = 8l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_main_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (toggle) {
				exitSequence_main_off();
				enterSequence_main_main_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
